{"version":3,"file":"static/js/150.3cb7aaaa.chunk.js","mappings":"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","sources":["components/DataGrid.js","sections/admin/project-list/BuildHistory.js","sections/admin/project-list/ReleaseHistory.js","../node_modules/@mui/icons-material/esm/Public.js","../node_modules/@mui/icons-material/esm/Lock.js","../node_modules/@mui/icons-material/esm/Link.js","pages/admin/project-list.js"],"sourcesContent":["import { useMemo } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n// material-ui\r\nimport { useTheme } from '@mui/material/styles';\r\nimport { Portal } from '@mui/base/Portal';\r\nimport { Pagination as MuiPagination } from '@mui/material';\r\n\r\n// mui data grid\r\nimport {\r\n    DataGrid,\r\n    // GridActionsCellItem,\r\n    // GridColumnMenu,\r\n    gridClasses,\r\n    gridPageCountSelector,\r\n    GridPagination,\r\n    // GridToolbar,\r\n    // GridToolbarColumnsButton,\r\n    // GridToolbarContainer,\r\n    // GridToolbarDensitySelector,\r\n    // GridToolbarFilterButton,\r\n    GridToolbarQuickFilter,\r\n    trTR,\r\n    enUS,\r\n    useGridApiContext,\r\n    useGridSelector\r\n} from '@mui/x-data-grid';\r\n\r\n// project-import\r\nimport { ThemeMode } from 'config';\r\n\r\n// third-party\r\nimport { useIntl } from 'react-intl';\r\n\r\n// ==============================|| GRID PAGINATION ||============================== //\r\nfunction Pagination({ page, onPageChange, className }) {\r\n    const apiRef = useGridApiContext();\r\n    const pageCount = useGridSelector(apiRef, gridPageCountSelector);\r\n\r\n    return (\r\n        <MuiPagination\r\n            variant=\"outlined\"\r\n            shape=\"rounded\"\r\n            color=\"primary\"\r\n            className={className}\r\n            count={pageCount}\r\n            page={page + 1}\r\n            onChange={(event, newPage) => {\r\n                onPageChange(event, newPage - 1);\r\n            }}\r\n        />\r\n    );\r\n};\r\n\r\nPagination.propTypes = {\r\n    className: PropTypes.string,\r\n    /**\r\n     * Callback fired when the page is changed.\r\n     *\r\n     * @param {React.MouseEvent<HTMLButtonElement> | null} event The event source of the callback.\r\n     * @param {number} page The page selected.\r\n     */\r\n    onPageChange: PropTypes.func.isRequired,\r\n    /**\r\n     * The zero-based index of the current page.\r\n     */\r\n    page: PropTypes.number.isRequired,\r\n};\r\n\r\nfunction CustomPagination(props) {\r\n    return <GridPagination ActionsComponent={Pagination} {...props} />;\r\n};\r\n\r\nfunction CustomToolbar() {\r\n    return (\r\n        <Portal container={() => document.getElementById('filter-panel')}>\r\n            <GridToolbarQuickFilter variant=\"outlined\" size=\"small\" />\r\n        </Portal>\r\n    );\r\n};\r\n\r\n// ==============================|| GRID SKELETON ||============================== //\r\nexport default function GridSkeleton(props) {\r\n    const theme = useTheme();\r\n    const intl = useIntl();\r\n\r\n    const localeText = useMemo(\r\n        () => {\r\n            if (theme.language === 'tr')\r\n                return trTR.components.MuiDataGrid.defaultProps.localeText;\r\n            // else if (theme.language === 'en')\r\n            else\r\n                return enUS.components.MuiDataGrid.defaultProps.localeText;\r\n        },\r\n        // eslint-disable-next-line\r\n        [theme, intl]\r\n    );\r\n\r\n    return (\r\n        <DataGrid\r\n            {...props}\r\n            localeText={{\r\n                ...localeText,\r\n                MuiTablePagination: {\r\n                    ...localeText.MuiTablePagination,\r\n                    labelDisplayedRows: ({ from, to, count }) =>\r\n                        `${from}-${to} / ${count}`,\r\n                },\r\n            }}\r\n            ignoreDiacritics\r\n            getRowClassName={(params) =>\r\n                params.indexRelativeToCurrentPage % 2 === 0 ? 'even' : 'odd'\r\n            }\r\n            sx={{\r\n                [`& .${gridClasses.row}.even`]: (theme.palette.mode === ThemeMode.LIGHT) ? {\r\n                    backgroundColor: theme.palette.background.default,\r\n                    '&:hover, &.Mui-hovered': {\r\n                        backgroundColor: theme.palette.divider,\r\n                        '@media (hover: none)': {\r\n                            backgroundColor: 'transparent',\r\n                        },\r\n                    },\r\n                } : {},\r\n                ...props.sx\r\n            }}\r\n            slots={{ pagination: CustomPagination, toolbar: CustomToolbar, ...props.slots }}\r\n            // slotProps={{\r\n            //     toolbar: {\r\n            //         showQuickFilter: true,\r\n            //         printOptions: { disableToolbarButton: true },\r\n            //         csvOptions: { disableToolbarButton: true },\r\n            //     },\r\n            // }}\r\n            // style={{ backgroundColor: 'white' }}\r\n            initialState={{\r\n                pagination: {\r\n                    paginationModel: {\r\n                        pageSize: props.pageSize ?? 10,\r\n                        /* page: 0 // default value will be used if not passed */\r\n                    },\r\n                },\r\n            }}\r\n            pageSizeOptions={[10, 25, 50, 100]}\r\n            autoHeight={true}\r\n            disableRowSelectionOnClick\r\n            disableColumnMenu\r\n            disableColumnFilter\r\n            disableColumnSelector\r\n            disableDensitySelector\r\n        />\r\n    );\r\n};\r\n","import { useEffect, useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n// project imports\r\nimport CustomGrid from 'components/DataGrid';\r\n\r\nimport { GetBuildHistory } from 'api/ProjectsApi';\r\n\r\n// ==============================|| PROJECT LIST - BUILD HISTORY ||============================== //\r\n\r\nconst BuildHistory = (props) => {\r\n    const {\r\n        projects = []\r\n    } = props;\r\n\r\n    const [loading, setLoading] = useState(true);\r\n\r\n    const [builds, setBuilds] = useState({});\r\n\r\n    useEffect(() => {\r\n        const fetchBuilds = async () => {\r\n            const buildsData = [];\r\n            for (const project of projects) {\r\n                try {\r\n                    const buildsResponse = await GetBuildHistory(project.name);\r\n                    if (buildsResponse.data.count > 0) {\r\n                        buildsResponse.data.value.forEach(build => {\r\n                            buildsData.push({\r\n                                id: build.id,\r\n                                projectName: project.name,\r\n                                buildNumber: build.buildNumber,\r\n                                status: build.status,\r\n                                result: build.result\r\n                            });\r\n                        });\r\n                    }\r\n                } catch (error) {\r\n                    console.error(`Error fetching builds for project ${project.name}:`, error);\r\n                }\r\n            }\r\n            setBuilds(buildsData);\r\n            setLoading(false);\r\n        };\r\n\r\n        if (projects.length > 0) {\r\n            fetchBuilds();\r\n        }\r\n    }, [projects]);\r\n\r\n    const columns = [\r\n        { field: 'id', headerName: 'ID', width: 90, headerAlign: 'center', align: 'center' },\r\n        { field: 'projectName', headerName: 'Project Name', width: 150 },\r\n        { field: 'buildNumber', headerName: 'Build Number', width: 150 },\r\n        { field: 'status', headerName: 'Status', width: 110, headerAlign: 'center', align: 'center' },\r\n        { field: 'result', headerName: 'Result', width: 110, headerAlign: 'center', align: 'center' }\r\n    ];\r\n\r\n    return (\r\n        <div style={{ padding: '0 20px 0 20px', width: '100%' }}>\r\n            <h1>Build History</h1>\r\n            <CustomGrid\r\n                rows={Array.isArray(builds) ? builds : []}\r\n                columns={columns}\r\n                getRowHeight={() => 'auto'}\r\n                loading={loading}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nBuildHistory.propTypes = {\r\n    projects: PropTypes.oneOfType([\r\n        PropTypes.object,\r\n        PropTypes.array\r\n    ]).isRequired\r\n};\r\n\r\nexport default BuildHistory;\r\n","import React, { useEffect, useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n// project imports\r\nimport CustomGrid from 'components/DataGrid';\r\nimport { GetReleaseHistory } from 'api/ProjectsApi';\r\n\r\n// third-party\r\nimport moment from 'moment';\r\n\r\n// ==============================|| PROJECT LIST - RELEASE HISTORY ||============================== //\r\n\r\nconst ReleaseHistory = (props) => {\r\n    const {\r\n        projects = []\r\n    } = props;\r\n\r\n    const [loading, setLoading] = useState(true);\r\n\r\n    const [releases, setReleases] = useState([]);\r\n\r\n    useEffect(() => {\r\n        const fetchReleases = async () => {\r\n            const releasesData = [];\r\n            for (const project of projects) {\r\n                try {\r\n                    const releasesResponse = await GetReleaseHistory(project.name);\r\n                    if (releasesResponse.data.count > 0) {\r\n                        releasesResponse.data.value.forEach(release => {\r\n                            releasesData.push({\r\n                                id: release.id,\r\n                                projectName: project.name,\r\n                                releaseName: release.name,\r\n                                status: release.status,\r\n                                createdOn: release.createdOn\r\n                            });\r\n                        });\r\n                    }\r\n                } catch (error) {\r\n                    console.error(`Error fetching releases for project ${project.name}:`, error);\r\n                }\r\n            }\r\n            setReleases(releasesData);\r\n            setLoading(false);\r\n        };\r\n\r\n        if (projects.length > 0) {\r\n            fetchReleases();\r\n        }\r\n    }, [projects]);\r\n\r\n    const columns = [\r\n        { field: 'id', headerName: 'ID', width: 90, headerAlign: 'center', align: 'center' },\r\n        { field: 'projectName', headerName: 'Project Name', width: 150 },\r\n        { field: 'releaseName', headerName: 'Release Name', width: 150 },\r\n        { field: 'status', headerName: 'Status', width: 110, headerAlign: 'center', align: 'center' },\r\n        { field: 'createdOn', headerName: 'Created On', width: 200, renderCell: (params) => Boolean(params.value) && moment(params.value).format('LLL') },\r\n    ];\r\n\r\n    return (\r\n        <div style={{ padding: '0 20px 0 20px', width: '100%' }}>\r\n            <h1>Release History</h1>\r\n            <CustomGrid\r\n                rows={Array.isArray(releases) ? releases : []}\r\n                columns={columns}\r\n                // getRowId={(row) => `${row?.id}-${row?.projectReference?.id}`}\r\n                getRowId={() => crypto.randomUUID()}\r\n                getRowHeight={() => 'auto'}\r\n                loading={loading}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nReleaseHistory.propTypes = {\r\n    projects: PropTypes.oneOfType([\r\n        PropTypes.object,\r\n        PropTypes.array\r\n    ]).isRequired\r\n};\r\n\r\nexport default ReleaseHistory;\r\n","\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2m-1 17.93c-3.95-.49-7-3.85-7-7.93 0-.62.08-1.21.21-1.79L9 15v1c0 1.1.9 2 2 2zm6.9-2.54c-.26-.81-1-1.39-1.9-1.39h-1v-3c0-.55-.45-1-1-1H8v-2h2c.55 0 1-.45 1-1V7h2c1.1 0 2-.9 2-2v-.41c2.93 1.19 5 4.06 5 7.41 0 2.08-.8 3.97-2.1 5.39\"\n}), 'Public');","\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M18 8h-1V6c0-2.76-2.24-5-5-5S7 3.24 7 6v2H6c-1.1 0-2 .9-2 2v10c0 1.1.9 2 2 2h12c1.1 0 2-.9 2-2V10c0-1.1-.9-2-2-2m-6 9c-1.1 0-2-.9-2-2s.9-2 2-2 2 .9 2 2-.9 2-2 2m3.1-9H8.9V6c0-1.71 1.39-3.1 3.1-3.1s3.1 1.39 3.1 3.1z\"\n}), 'Lock');","\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76 0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71 0-3.1-1.39-3.1-3.1M8 13h8v-2H8zm9-6h-4v1.9h4c1.71 0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76 0 5-2.24 5-5s-2.24-5-5-5\"\n}), 'Link');","import React, { useMemo } from 'react';\r\nimport { useLoaderData } from 'react-router-dom';\r\n\r\n// material-ui\r\nimport { useTheme } from '@mui/material/styles';\r\nimport { Box, Link, Stack } from '@mui/material';\r\n\r\n// project imports\r\nimport CustomGrid from 'components/DataGrid';\r\nimport MainCard from 'components/MainCard';\r\nimport BuildHistory from 'sections/admin/project-list/BuildHistory';\r\nimport ReleaseHistory from 'sections/admin/project-list/ReleaseHistory';\r\n\r\n// assets\r\nimport { Link as LinkIcon, Lock as LockIcon, Public as PublicIcon } from '@mui/icons-material/';\r\n\r\n// third-party\r\nimport { FormattedMessage, useIntl } from 'react-intl';\r\nimport moment from 'moment';\r\n\r\n// ==============================|| PROJECT LIST ||============================== //\r\n\r\nexport default function ProjectList() {\r\n  const theme = useTheme();\r\n  const intl = useIntl();\r\n\r\n  const items = useLoaderData();\r\n  const rows = items?.value || [];\r\n\r\n  const columns = useMemo(\r\n    () => [\r\n      {\r\n        field: 'id',\r\n        headerName: 'ID',\r\n        description: 'ID',\r\n        flex: 1,\r\n        minWidth: 150,\r\n        headerAlign: 'center',\r\n        align: 'center'\r\n      },\r\n      {\r\n        field: 'name',\r\n        headerName: intl.formatMessage({ id: \"name\" }),\r\n        description: intl.formatMessage({ id: \"name\" }),\r\n        flex: 1,\r\n        minWidth: 150\r\n      },\r\n      {\r\n        field: 'description',\r\n        headerName: intl.formatMessage({ id: \"description\" }),\r\n        description: intl.formatMessage({ id: \"description\" }),\r\n        flex: 2,\r\n        minWidth: 150\r\n      },\r\n      {\r\n        field: 'state',\r\n        headerName: \"state\",\r\n        description: \"state\",\r\n        flex: 0.75,\r\n        minWidth: 100\r\n      },\r\n      {\r\n        field: 'revision',\r\n        headerName: \"revision\",\r\n        description: \"revision\",\r\n        flex: 0.75,\r\n        minWidth: 100,\r\n        headerAlign: 'center',\r\n        align: 'center',\r\n      },\r\n      {\r\n        field: 'lastUpdateTime',\r\n        headerName: \"lastUpdateTime\",\r\n        description: \"lastUpdateTime\",\r\n        flex: 1,\r\n        minWidth: 150,\r\n        renderCell: (params) => Boolean(params.value) && moment(params.value).format('LLL')\r\n      },\r\n      {\r\n        field: 'visibility',\r\n        headerName: 'Visibility',\r\n        description: 'Visibility',\r\n        flex: 0.5,\r\n        minWidth: 100,\r\n        headerAlign: 'center',\r\n        align: 'center',\r\n        renderCell: (params) => (\r\n          params.value === 'public'\r\n            ? <PublicIcon style={{ fontSize: '20px', color: theme.palette.success.main }} />\r\n            : <LockIcon style={{ fontSize: '20px', color: theme.palette.error.main }} />\r\n        ),\r\n      },\r\n      {\r\n        field: 'url',\r\n        headerName: intl.formatMessage({ id: \"url\" }),\r\n        description: intl.formatMessage({ id: \"url\" }),\r\n        flex: 0.5,\r\n        minWidth: 100,\r\n        headerAlign: 'center',\r\n        align: 'center',\r\n        renderCell: (params) => (\r\n          <Link href={params.value} target=\"_blank\" rel=\"noopener\">\r\n            <LinkIcon style={{ fontSize: '20px', color: theme.palette.primary.main }} />\r\n          </Link>\r\n        ),\r\n      },\r\n    ],\r\n    // eslint-disable-next-line\r\n    [theme, intl]\r\n  );\r\n\r\n  return (\r\n    <>\r\n      <MainCard\r\n        content={false}\r\n        title={<FormattedMessage id=\"project-list\" />}\r\n        secondary={\r\n          <Stack direction=\"row\" spacing={2}>\r\n            <Box id=\"filter-panel\" />\r\n          </Stack>\r\n        }\r\n      >\r\n        <CustomGrid\r\n          rows={rows}\r\n          columns={columns}\r\n          // getRowId={(row) => row.originId}\r\n          getRowHeight={() => 'auto'}\r\n          sx={{\r\n            \"& .MuiDataGrid-columnHeaderTitle\": {\r\n              whiteSpace: \"normal\",\r\n              lineHeight: \"normal\"\r\n            },\r\n            \"& .MuiDataGrid-columnHeader\": {\r\n              // Forced to use important since overriding inline styles\r\n              height: \"unset !important\"\r\n            },\r\n            \"& .MuiDataGrid-columnHeaders\": {\r\n              // Forced to use important since overriding inline styles\r\n              maxHeight: \"168px !important\"\r\n            },\r\n            \"& .MuiDataGrid-row\": {\r\n              minHeight: \"66.5px !important\"\r\n              // maxHeight: \"168px !important\"\r\n            },\r\n            // \"& .MuiDataGrid-cell\": {\r\n            //   // Forced to use important since overriding inline styles\r\n            //   whiteSpace: \"normal\",\r\n            //   lineHeight: \"normal\",\r\n            //   height: \"unset !important\",\r\n            // }\r\n            '& .MuiDataGrid-cell:first-of-type': {\r\n              paddingLeft: '24px', // Add extra space for first column\r\n            },\r\n            '& .MuiDataGrid-columnHeader:first-of-type': {\r\n              paddingLeft: '24px', // Add extra space for first header\r\n            },\r\n          }}\r\n        />\r\n        <BuildHistory projects={rows} />\r\n        <ReleaseHistory projects={rows} />\r\n      </MainCard>\r\n    </>\r\n  );\r\n}\r\n"],"names":["Pagination","_ref","page","onPageChange","className","apiRef","useGridApiContext","pageCount","useGridSelector","gridPageCountSelector","_jsx","MuiPagination","variant","shape","color","count","onChange","event","newPage","CustomPagination","props","GridPagination","_objectSpread","ActionsComponent","CustomToolbar","Portal","container","document","getElementById","children","GridToolbarQuickFilter","size","GridSkeleton","_props$pageSize","theme","useTheme","intl","useIntl","localeText","useMemo","language","trTR","components","MuiDataGrid","defaultProps","enUS","DataGrid","MuiTablePagination","labelDisplayedRows","_ref2","from","to","concat","ignoreDiacritics","getRowClassName","params","indexRelativeToCurrentPage","sx","_defineProperty","gridClasses","row","palette","mode","ThemeMode","LIGHT","backgroundColor","background","default","divider","slots","pagination","toolbar","initialState","paginationModel","pageSize","pageSizeOptions","autoHeight","disableRowSelectionOnClick","disableColumnMenu","disableColumnFilter","disableColumnSelector","disableDensitySelector","_props$projects","projects","_useState","useState","_useState2","_slicedToArray","loading","setLoading","_useState3","_useState4","builds","setBuilds","useEffect","fetchBuilds","_asyncToGenerator","_regeneratorRuntime","mark","_callee","buildsData","_iterator","_step","_loop","wrap","_context2","prev","next","_createForOfIteratorHelper","project","buildsResponse","_context","value","GetBuildHistory","name","sent","data","forEach","build","push","id","projectName","buildNumber","status","result","t0","console","error","stop","s","n","done","delegateYield","t1","e","f","finish","apply","arguments","length","_jsxs","style","padding","width","CustomGrid","rows","Array","isArray","columns","field","headerName","headerAlign","align","getRowHeight","releases","setReleases","fetchReleases","releasesData","releasesResponse","GetReleaseHistory","release","releaseName","createdOn","renderCell","Boolean","moment","format","getRowId","crypto","randomUUID","createSvgIcon","d","ProjectList","items","useLoaderData","description","flex","minWidth","formatMessage","PublicIcon","fontSize","success","main","LockIcon","Link","href","target","rel","LinkIcon","primary","_Fragment","MainCard","content","title","FormattedMessage","secondary","Stack","direction","spacing","Box","whiteSpace","lineHeight","height","maxHeight","minHeight","paddingLeft","BuildHistory","ReleaseHistory"],"sourceRoot":""}