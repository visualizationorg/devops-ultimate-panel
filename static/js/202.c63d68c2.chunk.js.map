{"version":3,"file":"static/js/202.c63d68c2.chunk.js","mappings":"8UAuDA,EA1C0B,SAAHA,GAAA,IAAAC,EAAAD,EAAME,MAAAA,OAAK,IAAAD,EAAG,UAASA,EAAEE,EAAKH,EAALG,MAAOC,EAAKJ,EAALI,MAAOC,EAAUL,EAAVK,WAAYC,EAAMN,EAANM,OAAQC,EAAQP,EAARO,SAAQ,OACxFC,EAAAA,EAAAA,MAACC,EAAAA,EAAQ,CAACC,SAAS,EAAMH,SAAA,EACvBI,EAAAA,EAAAA,KAACC,EAAAA,EAAG,CAACC,GAAI,CAAEC,EAAG,MAAOP,UACnBC,EAAAA,EAAAA,MAACO,EAAAA,EAAK,CAACC,QAAS,GAAIT,SAAA,EAClBI,EAAAA,EAAAA,KAACM,EAAAA,EAAU,CAACC,QAAQ,KAAKhB,MAAM,gBAAeK,SAC3CJ,KAEHK,EAAAA,EAAAA,MAACO,EAAAA,EAAK,CAACI,UAAU,MAAMC,WAAW,SAAQb,SAAA,EACxCI,EAAAA,EAAAA,KAACM,EAAAA,EAAU,CAACC,QAAQ,KAAKhB,MAAM,UAASK,SACrCH,IAEFC,IACCM,EAAAA,EAAAA,KAACU,EAAAA,EAAI,CACHH,QAAQ,WACRhB,MAAOA,EACPoB,MACEd,EAAAA,EAAAA,MAAAe,EAAAA,SAAA,CAAAhB,SAAA,EACID,IAAUK,EAAAA,EAAAA,KAACa,EAAAA,EAAY,CAACC,MAAO,CAAEC,SAAU,UAAWxB,MAAO,aAC9DI,IAAUK,EAAAA,EAAAA,KAACgB,EAAAA,EAAY,CAACF,MAAO,CAAEC,SAAU,UAAWxB,MAAO,gBAGlE0B,MAAK,GAAAC,OAAKxB,EAAU,KACpBQ,GAAI,CAAEiB,GAAI,KAAMC,GAAI,GACpBC,KAAK,kBAMdzB,IACQ,E,wGC8Bb,EAxDsB,WACpB,IAAM0B,GAAQC,EAAAA,EAAAA,KAEd,OACEvB,EAAAA,EAAAA,KAACF,EAAAA,EAAQ,CACP0B,QAAQ,EACRtB,GAAI,CACFuB,WACEH,EAAMd,YAAckB,EAAAA,GAAeC,IAAG,6BAAAT,OACLI,EAAMM,QAAQC,QAAQC,QAAO,WAAAZ,OAAUI,EAAMM,QAAQC,QAAQE,MAAK,aAAAb,OAAYI,EAAMM,QAAQC,QAAQG,KAAI,aAAAd,OAAYI,EAAMM,QAAQC,QAAQI,KAAI,aAAAf,OAAYI,EAAMM,QAAQC,QAAQK,OAAM,2CAAAhB,OACrLI,EAAMM,QAAQC,QAAQC,QAAO,YAAAZ,OAAWI,EAAMM,QAAQC,QAAQE,MAAK,aAAAb,OAAYI,EAAMM,QAAQC,QAAQG,KAAI,aAAAd,OAAYI,EAAMM,QAAQC,QAAQI,KAAI,aAAAf,OAAYI,EAAMM,QAAQC,QAAQK,OAAM,cAC3NtC,UAEFC,EAAAA,EAAAA,MAACsC,EAAAA,GAAI,CAACC,WAAS,EAAAxC,SAAA,EACbI,EAAAA,EAAAA,KAACmC,EAAAA,GAAI,CAACE,MAAI,EAACC,GAAI,EAAGC,GAAI,EAAGC,GAAI,GAAG5C,UAC9BC,EAAAA,EAAAA,MAACO,EAAAA,EAAK,CAACC,QAAS,EAAGH,GAAI,CAAEuC,QAAS,KAAM7C,SAAA,EACtCI,EAAAA,EAAAA,KAACM,EAAAA,EAAU,CAACC,QAAQ,KAAKhB,MAAO+B,EAAMM,QAAQH,WAAWiB,MAAM9C,UAC7DI,EAAAA,EAAAA,KAAC2C,EAAAA,EAAgB,CAACC,GAAG,eAEvB5C,EAAAA,EAAAA,KAACM,EAAAA,EAAU,CAACC,QAAQ,KAAKhB,MAAO+B,EAAMM,QAAQH,WAAWiB,MAAM9C,SAAC,8GAGhEI,EAAAA,EAAAA,KAACC,EAAAA,EAAG,CAAAL,UACFC,EAAAA,EAAAA,MAACgD,EAAAA,EAAM,CACLC,kBAAgB,EAChBvC,QAAQ,WACRhB,MAAM,YACNW,GAAI,CACF6C,OAAQ,UACRxD,MAAO+B,EAAMM,QAAQH,WAAWiB,MAChCM,YAAa1B,EAAMM,QAAQH,WAAWiB,MACtC,UAAW,CACTnD,MAAO,mBACPyD,YAAa1B,EAAMM,QAAQH,WAAWiB,MACtCO,QAAS3B,EAAMM,QAAQsB,OAASC,EAAAA,GAAUC,KAAO,iBAAmB,iBAEtExD,SAAA,CACH,kBACiByD,wBAKxBrD,EAAAA,EAAAA,KAACmC,EAAAA,GAAI,CAACE,MAAI,EAACE,GAAI,EAAGC,GAAI,GAAItC,GAAI,CAAEoD,QAAS,CAAEd,GAAI,OAAQD,GAAI,YAAc3C,UACvEC,EAAAA,EAAAA,MAACO,EAAAA,EAAK,CAACF,GAAI,CAAEqD,SAAU,WAAYC,GAAI,CAAEjB,GAAI,EAAGD,GAAI,IAAOmB,eAAe,SAAShD,WAAW,WAAUb,SAAA,EACtGI,EAAAA,EAAAA,KAAA,OAAK0D,IAAKC,EAAcC,IAAI,aAC5B5D,EAAAA,EAAAA,KAACC,EAAAA,EAAG,CAACC,GAAI,CAAEqD,SAAU,WAAYM,OAAQ,EAAGC,MAAO,OAAQlE,UACzDI,EAAAA,EAAAA,KAAA,OAAK0D,I,6+BAAwBE,IAAI,6BAO/C,E,gCCQA,EAjEuB,WACrB,IAAMtC,GAAQC,EAAAA,EAAAA,KACN2B,GAASa,EAAAA,EAAAA,KAATb,KAoCRc,EAA+B1C,EAAMM,QAAQqC,KAArCpC,EAAOmC,EAAPnC,QAASqC,EAASF,EAATE,UACXC,EAAO7C,EAAMM,QAAQwC,QAE3BC,GAA8BC,EAAAA,EAAAA,UApCL,CACvBC,MAAO,CACL3B,GAAI,kBACJ4B,UAAW,CACTC,SAAS,GAEXC,OAAQ,IACRC,KAAM,MACNC,QAAS,CACPC,MAAM,GAERC,SAAU,GAEZC,WAAY,CACVN,SAAS,GAEXO,YAAa,CACXC,IAAK,CACHC,YAAa,QAGjBC,QAAS,CACPC,EAAG,CACDP,MAAM,GAERQ,EAAG,CACDC,UAAS,SAACC,GACR,MAAM,KAANrE,OAAYqE,EACd,MAQkDC,GAAAC,EAAAA,EAAAA,GAAApB,EAAA,GAAjDqB,EAAOF,EAAA,GAAEG,EAAUH,EAAA,IAE1BI,EAAAA,EAAAA,YAAU,WACRD,GAAW,SAACE,GAAS,OAAAC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAChBD,GAAS,IACZE,OAAQ,CAACzE,EAAMM,QAAQC,QAAQG,KAAMV,EAAMM,QAAQC,QAAQ,MAC3DP,MAAO,CACL4B,KAAMA,IAASC,EAAAA,GAAUC,KAAO,OAAS,UAC1C,GAEL,GAAG,CAACF,EAAMrB,EAASqC,EAAWC,EAAM7C,IAEpC,IAAA0E,GAAiB1B,EAAAA,EAAAA,UAAS,CACxB,CACE2B,KAAM,QACNC,KAAM,CACJ,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,GAAI,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,GAAI,IAAK,IAAK,IAAK,IAAK,IAAK,QAJ/HC,GAOLV,EAAAA,EAAAA,GAAAO,EAAA,GAPW,GASb,OAAOhG,EAAAA,EAAAA,KAACoG,EAAAA,EAAc,CAACV,QAASA,EAASS,OAAQA,EAAQxB,KAAK,MAAMD,OAAQ,KAC9E,E,+BC9DM2B,EAAQC,KAAK,IAADpF,OADNmC,yFAENkD,EAAe,aA6GrB,EAzGwB,YACRhF,EAAAA,EAAAA,MACGwC,EAAAA,EAAAA,KAATb,KADR,IAGAmB,GAA4BC,EAAAA,EAAAA,UAAS,IAAGkB,GAAAC,EAAAA,EAAAA,GAAApB,EAAA,GAAjCmC,EAAMhB,EAAA,GAAEiB,EAASjB,EAAA,IAExBI,EAAAA,EAAAA,YAAU,WACR,IAAMc,EAAsB,eAAArH,GAAAsH,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAC,IAAA,IAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAA,OAAAR,EAAAA,EAAAA,KAAAS,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAGIC,EAAAA,EAAMC,IAAI,yBAADxG,OACbqF,EAAY,mCACrC,CACEoB,QAAS,CACP,cAAgB,SAADzG,OAAWmF,GAC1B,eAAgB,sBAGpB,KAAD,EAeA,OAvBKU,EAAgBO,EAAAM,KAUhBZ,EAAWD,EAAiBb,KAAK2B,MAGjCZ,EAAgBD,EAASc,KAAI,SAAAC,GAAO,OACxCN,EAAAA,EAAMC,IAAI,yBAADxG,OACkBqF,EAAY,KAAArF,OAAI6G,EAAQ9B,KAAI,+CACrD,CACE0B,QAAS,CACP,cAAgB,SAADzG,OAAWmF,GAC1B,eAAgB,qBAGrB,IACFiB,EAAAE,KAAA,EAE4BQ,QAAQC,IAAIhB,GAAe,KAAD,EAAjDC,EAAcI,EAAAM,KAGhBT,EAAYD,EAAegB,SAAQ,SAAAC,GAAQ,OAAIA,EAASjC,KAAK2B,KAAK,IAGhET,EAAeD,EAClBiB,MAAK,SAACC,EAAGC,GAAC,OAAK,IAAIC,KAAKD,EAAEE,WAAa,IAAID,KAAKF,EAAEG,UAAU,IAC5DC,MAAM,EAAG,IAEZhC,EAAUW,GAAcE,EAAAE,KAAA,iBAAAF,EAAAC,KAAA,GAAAD,EAAAoB,GAAApB,EAAA,SAExBqB,QAAQC,MAAM,yBAAwBtB,EAAAoB,IAAS,yBAAApB,EAAAuB,OAAA,GAAA/B,EAAA,mBAElD,kBA1C2B,OAAAzH,EAAAyJ,MAAA,KAAAC,UAAA,KA4C5BrC,GACF,GAAG,IAGH,IAAMsC,EAAiBxC,EAAOsB,KAAI,SAACmB,GACjC,IAAMT,EAAYU,IAAOD,EAAMT,WAEzBW,EADaD,IAAOD,EAAMG,YACJC,KAAKb,EAAW,WAE5C,MAAO,CACLvC,KAAMgD,EAAMlB,QAAQ9B,KACpBkD,SAAUG,WAAWH,EAASI,QAAQ,IAE1C,IAGMC,EAAe,CACnBjF,MAAO,CACLI,KAAM,OAER8E,MAAO,CACLC,WAAYV,EAAelB,KAAI,SAAAmB,GAAK,OAAIA,EAAMhD,IAAI,IAClDzG,MAAO,CACLyE,KAAM,iBAGV0F,MAAO,CACLnK,MAAO,CACLyE,KAAM,uBAGVzE,MAAO,CACLyE,KAAM,iBACN2F,MAAO,SACP9I,MAAO,CACLC,SAAU,UAKV8I,EAAc,CAAC,CACnB5D,KAAM,WACNC,KAAM8C,EAAelB,KAAI,SAAAmB,GAAK,OAAIA,EAAME,QAAQ,MAGlD,OACAnJ,EAAAA,EAAAA,KAAC8J,EAAAA,EAAU,CACTpE,QAAS8D,EACTrD,OAAQ0D,EACRlF,KAAK,MACLD,OAAQ,KAEZ,E,iCCnGA,EArB0B,WACtB,IAAAqF,GAAmCC,EAAAA,EAAAA,MAA3BxD,EAAMuD,EAANvD,OAAQyD,EAAOF,EAAPE,QAASrB,EAAKmB,EAALnB,MAEzB,OAAIqB,GAAgBjK,EAAAA,EAAAA,KAAA,OAAAJ,SAAK,qBACrBgJ,GAAc/I,EAAAA,EAAAA,MAAA,OAAAD,SAAA,CAAK,SAAOgJ,EAAMsB,YAGhCrK,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACII,EAAAA,EAAAA,KAAA,MAAAJ,SAAI,mEACJI,EAAAA,EAAAA,KAAA,MAAAJ,SACK4G,EAAOsB,KAAI,SAACmB,GAAK,OACdpJ,EAAAA,EAAAA,MAAA,MAAAD,SAAA,CAAmB,UACPqJ,EAAMlB,QAAQ9B,KAAK,gBAAcgD,EAAMrG,GAAG,cAAYqG,EAAMkB,OAAO,cAClElB,EAAMmB,OAAO,0CAAsB,IAAI7B,KAAKU,EAAMT,WAAW6B,mBAFjEpB,EAAMrG,GAGV,QAKzB,E,sBC8BA,EAjDsB,SAAHvD,GAA2D,IAADiL,EAAAjL,EAApD6K,QAAAA,OAAO,IAAAI,EAAG,mBAAeA,EAAAC,EAAAlL,EAAEmL,WAAAA,OAAU,IAAAD,GAAQA,EAC5DxK,GACFF,EAAAA,EAAAA,MAACI,EAAAA,EAAG,CACAqD,QAAQ,OACRmH,cAAc,SACdhK,WAAW,SACXgD,eAAe,SACfiH,IAAK,EACLxK,GAAI,CACAC,EAAG,EACHwK,UAAWH,EAAa,QAAU,QAClCI,MAAO,QACThL,SAAA,EAEFI,EAAAA,EAAAA,KAAC6K,EAAAA,EAAgB,IAChBX,IACGlK,EAAAA,EAAAA,KAACM,EAAAA,EAAU,CAACC,QAAQ,QAAQhB,MAAM,gBAAeK,SAC5CsK,OAMjB,OAAIM,GAEIxK,EAAAA,EAAAA,KAACC,EAAAA,EAAG,CACAC,GAAI,CACAqD,SAAU,QACVuH,IAAK,EACLC,KAAM,EACNjH,MAAO,EACPD,OAAQ,EACRmH,gBAAiB,mBACjBC,OAAQ,MACVrL,SAEDG,IAKNA,CACX,E,WCMA,EAhDqB,SAAHV,GAA4B,IAAD6L,EAArBtC,EAAKvJ,EAALuJ,MAAOuC,EAAO9L,EAAP8L,QACrBC,EAAkB,OAALxC,QAAK,IAALA,GAAe,QAAVsC,EAALtC,EAAOT,gBAAQ,IAAA+C,OAAV,EAALA,EAAiBf,OAoBpC,OACInK,EAAAA,EAAAA,KAACqL,EAAAA,EAAK,CACFC,SAAS,QACTC,OACIJ,IACInL,EAAAA,EAAAA,KAAC6C,EAAAA,EAAM,CACHtD,MAAM,UACN8B,KAAK,QACLmK,QAASL,EAAQvL,SACpB,iBAIRA,UAEDI,EAAAA,EAAAA,KAACM,EAAAA,EAAU,CAACC,QAAQ,YAAWX,SAjCf,WACpB,GAAIwL,EACA,OAAQxC,EAAMT,SAASgC,QACnB,KAAK,IACD,MAAO,mFACX,KAAK,IACD,MAAO,6CACX,KAAK,IACD,MAAO,uCACX,KAAK,IACD,MAAO,uEACX,QACI,OAAOvB,EAAMsB,SAAW,uBAGpC,OAAY,OAALtB,QAAK,IAALA,OAAK,EAALA,EAAOsB,UAAW,kCAC7B,CAkBauB,MAIjB,E,WCUA,EAhDsB,SAAHpM,GAUZ,IATH4K,EAAO5K,EAAP4K,QACArB,EAAKvJ,EAALuJ,MACA1C,EAAI7G,EAAJ6G,KACAiF,EAAO9L,EAAP8L,QACAO,EAAcrM,EAAdqM,eACAC,EAAYtM,EAAZsM,aACAC,EAAavM,EAAbuM,cACAhM,EAAQP,EAARO,SAAQiM,EAAAxM,EACRa,GAAAA,OAAE,IAAA2L,EAAG,CAAC,EAACA,EAEP,OAAI5B,GACOjK,EAAAA,EAAAA,KAAC8L,EAAa,CAAC5B,QAASwB,IAG/B9C,GAEI5I,EAAAA,EAAAA,KAAC+L,EAAY,CACTnD,MAAOA,EACPsB,QAASyB,EACTR,QAASA,KAKhBjF,GAAS8F,MAAMC,QAAQ/F,IAAyB,IAAhBA,EAAKgG,QAC/BlM,EAAAA,EAAAA,KAACmM,EAAAA,EAAM,CAACjC,QAAS0B,KAIxB5L,EAAAA,EAAAA,KAACC,EAAAA,EAAG,CAACC,GAAIA,EAAGN,SACPA,GAGb,ECwBA,EA1D0B,WACtB,IAAAwM,GAAqDC,EAAAA,EAAAA,MAAvCC,EAASF,EAAflG,KAAiB+D,EAAOmC,EAAPnC,QAASrB,EAAKwD,EAALxD,MAAO2D,EAAOH,EAAPG,QAGnCC,EAAcF,EAAUG,QAAO,SAACC,EAAKrK,GACvC,IAAMsK,EAAQtK,EAAKuK,OAAO,gBAK1B,OAHID,IACAD,EAAIC,IAAUD,EAAIC,IAAU,GAAK,GAE9BD,CACX,GAAG,CAAC,GAGElD,EAAe,CACjBqD,OAAQC,OAAOC,KAAKP,GAAaQ,QAAO,SAAA/L,GAAK,OAAIA,CAAK,IACtDzB,MAAO,CACHyE,KAAM,sBACN2F,MAAO,SACP9I,MAAO,CACHC,SAAU,SAGlBkM,OAAQ,CACJ1J,SAAU,UAEd4B,QAAS,CACLE,EAAG,CACCC,UAAW,SAACC,GAAG,YAAc2H,IAAR3H,GAA6B,OAARA,EAAgBA,EAAI4H,WAAa,EAAE,KAMnFtD,EAAciD,OAAOM,OAAOZ,GAAaQ,QAAO,SAAAzH,GAAG,YAAY2H,IAAR3H,GAA6B,OAARA,CAAY,IAI9F,OACIvF,EAAAA,EAAAA,KAACqN,EAAa,CACVpD,QAASA,EACTrB,MAAOA,EACP1C,KAAMoG,EACNnB,QAASoB,EACTb,eAAe,iCACfE,cAAc,gCAA4BhM,UAE1CI,EAAAA,EAAAA,KAAC8J,EAAAA,EAAU,CACPpE,QAAS8D,EACTrD,OAAQ0D,EACRlF,KAAK,MACLD,OAAQ,IACRkG,MAAO,UAIvB,EC9BA,EA9B6B,WACzB,IAAAb,GAAsCC,EAAAA,EAAAA,MAA9BsC,EAASvC,EAATuC,UAAWrC,EAAOF,EAAPE,QAASrB,EAAKmB,EAALnB,MAE5B,GAAIqB,EAAS,OAAOjK,EAAAA,EAAAA,KAAA,OAAAJ,SAAK,qBACzB,GAAIgJ,EAAO,OAAO/I,EAAAA,EAAAA,MAAA,OAAAD,SAAA,CAAK,SAAOgJ,EAAMsB,WAGpC,IAAMsC,EAAcF,EAAUG,QAAO,SAACC,EAAKrK,GACvC,IAAMsK,EAAQtK,EAAKuK,OAAO,gBAK1B,OAHID,IACAD,EAAIC,IAAUD,EAAIC,IAAU,GAAK,GAE9BD,CACX,GAAG,CAAC,GAEJ,OACI7M,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACII,EAAAA,EAAAA,KAAA,MAAAJ,SAAI,gBACJI,EAAAA,EAAAA,KAAA,MAAAJ,SACKkN,OAAOQ,QAAQd,GAAa1E,KAAI,SAAAzI,GAAA,IAAAkO,GAAA9H,EAAAA,EAAAA,GAAApG,EAAA,GAAEmO,EAAGD,EAAA,GAAE1F,EAAK0F,EAAA,UACzC1N,EAAAA,EAAAA,MAAA,MAAAD,SAAA,CACK4N,EAAI,KAAG3F,IADH2F,EAEJ,QAKzB,E,sBC8GA,EAzIsB,WAClB,IAAAnJ,GAAkCC,EAAAA,EAAAA,UAAS,IAAGkB,GAAAC,EAAAA,EAAAA,GAAApB,EAAA,GAAvCiI,EAAS9G,EAAA,GAAEiI,EAAYjI,EAAA,GAC9BQ,GAAwD1B,EAAAA,EAAAA,UAAS,CAAC,GAAEoJ,GAAAjI,EAAAA,EAAAA,GAAAO,EAAA,GAA7D2H,EAAoBD,EAAA,GAAEE,EAAuBF,EAAA,GACpDG,GAAgDvJ,EAAAA,EAAAA,UAAS,CAAC,GAAEwJ,GAAArI,EAAAA,EAAAA,GAAAoI,EAAA,GAArDE,EAAgBD,EAAA,GAAEE,EAAmBF,EAAA,GAC5CG,GAA8B3J,EAAAA,EAAAA,WAAS,GAAK4J,GAAAzI,EAAAA,EAAAA,GAAAwI,EAAA,GAA5BE,GAAFD,EAAA,GAAYA,EAAA,IAC1BE,GAA0B9J,EAAAA,EAAAA,UAAS,MAAK+J,GAAA5I,EAAAA,EAAAA,GAAA2I,EAAA,GAA1BE,GAAFD,EAAA,GAAUA,EAAA,IA8GtB,OA5GAzI,EAAAA,EAAAA,YAAU,WACN,IAAM2I,EAAS,eAAAlP,GAAAsH,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAC,IAAA,IAAAE,EAAAwH,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAA/G,EAAAgH,EAAAC,EAAAC,EAAA,OAAArI,EAAAA,EAAAA,KAAAS,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAIV,OAJUF,EAAAC,KAAA,EAEV4G,GAAW,GAEX7G,EAAAE,KAAA,GACuB0H,EAAAA,EAAAA,MAAmB,KAAD,EAA3B,OAARlI,EAAQM,EAAAM,KAAAN,EAAAE,KAAA,GACkB2H,EAAAA,EAAAA,MAAiB,KAAD,EAA1CX,EAAiBlH,EAAAM,KAGjB6G,EAAuB,CAAC,EAACnH,EAAAoB,IAAA9B,EAAAA,EAAAA,KAAAmG,KACLyB,GAAiB,YAAAlH,EAAA8H,GAAA9H,EAAAoB,MAAA2G,KAAC,CAAD/H,EAAAE,KAAA,SAArB,OAAXkH,EAAWpH,EAAA8H,GAAAvH,MAAAP,EAAAE,KAAA,IACwB8H,EAAAA,EAAAA,IAAmBd,EAAkBE,IAAc,KAAD,GAA5FD,EAAqBC,GAAYpH,EAAAM,KAAAN,EAAAE,KAAA,iBAErCwG,EAAoBS,GAGhBE,EAAe,GACfC,EAAiB,IAAIW,IAAKV,GAAAW,EAAAA,EAAAA,GAERxI,GAAQM,EAAAC,KAAA,GAAAsH,EAAAY,IAAA,YAAAX,EAAAD,EAAAa,KAAAL,KAAC,CAAD/H,EAAAE,KAAA,SAAZ,OAAPO,EAAO+G,EAAAjH,MAAAP,EAAAE,KAAA,IACYmI,EAAAA,EAAAA,IAAyB5H,EAAQ9B,MAAM,KAAD,GAA/CqB,EAAAM,KACLgI,SAAQ,SAAAvN,GACR,OAAJA,QAAI,IAAJA,GAAAA,EAAMO,KAAOgM,EAAeiB,IAAIxN,EAAKO,KACrCgM,EAAekB,IAAIzN,EAAKO,GAEhC,IAAG,QAAA0E,EAAAE,KAAA,iBAAAF,EAAAE,KAAA,iBAAAF,EAAAC,KAAA,GAAAD,EAAAyI,GAAAzI,EAAA,UAAAuH,EAAAmB,EAAA1I,EAAAyI,IAAA,eAAAzI,EAAAC,KAAA,GAAAsH,EAAAoB,IAAA3I,EAAA4I,OAAA,YAIDnB,EAAW/C,MAAMmE,KAAKvB,GAAgB,KAAD,QACpCG,EAAS7C,OAAS,GAAC,CAAA5E,EAAAE,KAAA,SACe,OAA/BwH,EAAQD,EAASqB,OAAO,EAAG,KAAI9I,EAAAE,KAAA,IACf6I,EAAAA,EAAAA,IAAqBrB,EAAO,wHAAwH,KAAD,GAAnKC,EAAO3H,EAAAM,KACb+G,EAAY,GAAAzN,QAAAoP,EAAAA,EAAAA,GAAO3B,IAAY2B,EAAAA,EAAAA,GAAKrB,IAAS3H,EAAAE,KAAA,iBAGjDiG,EAAakB,GAAcrH,EAAAE,KAAA,iBAAAF,EAAAC,KAAA,GAAAD,EAAAiJ,GAAAjJ,EAAA,SAE3BgH,EAAQhH,EAAAiJ,IAAM,QAEI,OAFJjJ,EAAAC,KAAA,GAEd4G,GAAW,GAAO7G,EAAA4I,OAAA,6BAAA5I,EAAAuB,OAAA,GAAA/B,EAAA,uCAEzB,kBA1Cc,OAAAzH,EAAAyJ,MAAA,KAAAC,UAAA,KA4CfwF,GACJ,GAAG,KAEH3I,EAAAA,EAAAA,YAAU,WACN,IAAM4G,EAAc,CAAC,EACjBgE,EAAe,CAAC,EAChBC,EAAiB,CAAC,EAGtBnE,EAAUsD,SAAQ,SAACvN,GACf,IAAMsK,EAAQtK,EAAKuK,OAAO,gBACpB8D,EAAcrO,EAAKuK,OAAO,sBAC1B+D,EAAkBtO,EAAKuK,OAAO,0BAC9BgE,EAAkBvO,EAAKuK,OAAO,0BAGpC,GAAKgE,EAAL,CAGA,IAMWC,EANLC,EAAW,GAAA5P,OAAMwP,EAAW,OAAAxP,OAAMyP,GAClCI,EAAaH,EAKnB,GAAIjE,EACKH,EAAYsE,KACbtE,EAAYsE,GAAe,CAAC,GAE3BtE,EAAYsE,GAAaC,KAC1BvE,EAAYsE,GAAaC,GAAc,CAAEC,KAAM,EAAGC,WAAY,IAE7DT,EAAaM,KACdN,EAAaM,GAAe,CAAC,GAE5BN,EAAaM,GAAaC,KAC3BP,EAAaM,GAAaC,GAAc,CAAEG,MAAO,EAAGC,UAAW,IAGnEX,EAAaM,GAAaC,GAAYG,QAGS,eAAd,QAA7BL,EAAA9C,EAAiB2C,UAAY,IAAAG,OAAA,EAA7BA,EAAgClE,KAChC6D,EAAaM,GAAaC,GAAYI,WA3BlB,CA8BhC,IAGArE,OAAOC,KAAKyD,GAAcZ,SAAQ,SAACkB,GAC/BhE,OAAOC,KAAKyD,EAAaM,IAAclB,SAAQ,SAACmB,GAC5C,IAAAK,EAA6BZ,EAAaM,GAAaC,GAA/CG,EAAKE,EAALF,MAAOC,EAASC,EAATD,UACTzR,EAAawR,EAAQ,EAAKC,EAAYD,EAAS,IAAM,EACtDT,EAAeK,KAChBL,EAAeK,GAAe,CAAC,GAEnCL,EAAeK,GAAaC,GAAcrR,EAAW6J,QAAQ,EACjE,GACJ,IAEAqE,EAAwB6C,EAC5B,GAAG,CAACnE,KAGAzM,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACII,EAAAA,EAAAA,KAAA,MAAAJ,SAAI,0BACJI,EAAAA,EAAAA,KAAA,UAAAJ,SAAQ,sCACRI,EAAAA,EAAAA,KAAA,MAAAJ,SACKkN,OAAOQ,QAAQK,GAAsB7F,KAAI,SAAAyF,GAAA,IAAA8D,GAAA5L,EAAAA,EAAAA,GAAA8H,EAAA,GAAEuD,EAAWO,EAAA,GAAEC,EAAOD,EAAA,UAC5DxR,EAAAA,EAAAA,MAAA,MAAAD,SAAA,EACII,EAAAA,EAAAA,KAAA,UAAAJ,SAASkR,KACT9Q,EAAAA,EAAAA,KAAA,MAAAJ,SACKkN,OAAOQ,QAAQgE,GAASxJ,KAAI,SAAAyJ,GAAA,IAAAC,GAAA/L,EAAAA,EAAAA,GAAA8L,EAAA,GAAER,EAAUS,EAAA,GAAE9R,EAAU8R,EAAA,UACjD3R,EAAAA,EAAAA,MAAA,MAAAD,SAAA,CACKmR,EAAW,yBAAoBrR,IAD3BqR,EAEJ,QANRD,EASJ,QAKzB,E,WC7DA,EAzEiC,WAC/B,IAAAzM,GAAwBC,EAAAA,EAAAA,UAAS,CAAEmN,QAAS,EAAGC,QAAS,IAAIlM,GAAAC,EAAAA,EAAAA,GAAApB,EAAA,GAArD6B,EAAIV,EAAA,GAAEmM,EAAOnM,EAAA,GACpBQ,GAA8B1B,EAAAA,EAAAA,WAAS,GAAKoJ,GAAAjI,EAAAA,EAAAA,GAAAO,EAAA,GAArCiE,EAAOyD,EAAA,GAAES,EAAUT,EAAA,GAEpBkE,EAAmB,eAAAvS,GAAAsH,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAgL,IAAA,IAAAxL,EAAAE,EAAAoB,EAAAmK,EAAAC,EAAAN,EAAAC,EAAAM,EAAA,OAAApL,EAAAA,EAAAA,KAAAS,MAAA,SAAA4K,GAAA,cAAAA,EAAA1K,KAAA0K,EAAAzK,MAAA,OAQzB,MAPWnE,uFACNgD,EAAQC,KAAK,IAADpF,OADNmC,yFAENkD,EAAe,aAEfoB,EAAU,CACd,cAAgB,SAADzG,OAAWmF,GAC1B,eAAgB,oBACjB4L,EAAA1K,KAAA,EAAA0K,EAAAzK,KAAA,EAI6B0K,MAAM,yBAADhR,OAA0BqF,EAAY,0DAA0D,CAAEoB,QAAAA,IAAW,KAAD,EAA1H,OAAbmK,EAAaG,EAAArK,KAAAqK,EAAAzK,KAAA,GACKsK,EAAcK,OAAO,KAAD,GAmB1C,OAnBIJ,EAASE,EAAArK,KAEX6J,EAAU,EACVC,EAAU,EAGRM,EAAeD,EAAUlK,MAAMC,IAAG,eAAAyF,GAAA5G,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAC,SAAAC,EAAOsL,GAAI,IAAAC,EAAA,OAAAzL,EAAAA,EAAAA,KAAAS,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,WAC5B,IAAlB4K,EAAKE,UAAwC,eAAlBF,EAAKG,SAAyB,CAAAjL,EAAAE,KAAA,eAAAF,EAAAE,KAAA,EAC9B0K,MAAM,yBAADhR,OAA0BqF,EAAY,iCAAArF,OAAgCkR,EAAKxP,GAAE,2BAA2B,CAAE+E,QAAAA,IAAW,KAAD,EAAlI,OAAd0K,EAAc/K,EAAAM,KAAAN,EAAAE,KAAA,EACK6K,EAAeF,OAAO,KAAD,EAA9B7K,EAAAM,KAELC,MAAM+H,SAAQ,SAAA4C,IACD,IAAlBA,EAAM/N,SAAqC,WAAjB+N,EAAMrI,OAClCsH,IAEAC,GAEJ,IAAG,wBAAApK,EAAAuB,OAAA,GAAA/B,EAAA,KAEN,gBAAA2L,GAAA,OAAAlF,EAAAzE,MAAA,KAAAC,UAAE,CAAF,CAbuC,IAatCkJ,EAAAzK,KAAA,GAEIQ,QAAQC,IAAI+J,GAAc,KAAD,GAC/BL,EAAQ,CAAEF,QAAAA,EAASC,QAAAA,IACnBvD,GAAW,GAAO8D,EAAAzK,KAAA,iBAAAyK,EAAA1K,KAAA,GAAA0K,EAAAvJ,GAAAuJ,EAAA,SAGlBtJ,QAAQC,MAAM,wBAAuBqJ,EAAAvJ,IAAS,yBAAAuJ,EAAApJ,OAAA,GAAAgJ,EAAA,mBAEjD,kBAzCwB,OAAAxS,EAAAyJ,MAAA,KAAAC,UAAA,MA2CzBnD,EAAAA,EAAAA,YAAU,WACRgM,GACF,GAAG,IAUH,OACE5R,EAAAA,EAAAA,KAAA,OAAAJ,SACGqK,GAAUjK,EAAAA,EAAAA,KAAC0S,EAAAA,EAAe,CAAC5R,MAAO,CAAEC,SAAU,IAAM4R,MAAI,KACvD3S,EAAAA,EAAAA,KAAC4S,EAAAA,EAAS,CACRlN,QAXa,CACnBnB,MAAO,CACLI,KAAM,OAERkI,OAAQ,CAAC,YAAa,gBAQhB1G,OAAQ,CAACD,EAAKuL,QAASvL,EAAKwL,SAC5B/M,KAAK,MACLiG,MAAM,SAKhB,ECEA,EAzEgC,WAC9B,IAAAvG,GAAwBC,EAAAA,EAAAA,UAAS,CAAEmN,QAAS,EAAGC,QAAS,IAAIlM,GAAAC,EAAAA,EAAAA,GAAApB,EAAA,GAArD6B,EAAIV,EAAA,GAAEmM,EAAOnM,EAAA,GACpBQ,GAA8B1B,EAAAA,EAAAA,WAAS,GAAKoJ,GAAAjI,EAAAA,EAAAA,GAAAO,EAAA,GAArCiE,EAAOyD,EAAA,GAAES,EAAUT,EAAA,GAEpBkE,EAAmB,eAAAvS,GAAAsH,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAgL,IAAA,IAAAxL,EAAAE,EAAAoB,EAAAmK,EAAAC,EAAAN,EAAAC,EAAAM,EAAA,OAAApL,EAAAA,EAAAA,KAAAS,MAAA,SAAA4K,GAAA,cAAAA,EAAA1K,KAAA0K,EAAAzK,MAAA,OAQzB,MAPWnE,uFACNgD,EAAQC,KAAK,IAADpF,OADNmC,yFAENkD,EAAe,aAEfoB,EAAU,CACd,cAAgB,SAADzG,OAAWmF,GAC1B,eAAgB,oBACjB4L,EAAA1K,KAAA,EAAA0K,EAAAzK,KAAA,EAI6B0K,MAAM,yBAADhR,OAA0BqF,EAAY,0DAA0D,CAAEoB,QAAAA,IAAW,KAAD,EAA1H,OAAbmK,EAAaG,EAAArK,KAAAqK,EAAAzK,KAAA,GACKsK,EAAcK,OAAO,KAAD,GAmB1C,OAnBIJ,EAASE,EAAArK,KAEX6J,EAAU,EACVC,EAAU,EAGRM,EAAeD,EAAUlK,MAAMC,IAAG,eAAAyF,GAAA5G,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAC,SAAAC,EAAOsL,GAAI,IAAAC,EAAA,OAAAzL,EAAAA,EAAAA,KAAAS,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,WAC5B,IAAlB4K,EAAKE,UAAwC,eAAlBF,EAAKG,SAAyB,CAAAjL,EAAAE,KAAA,eAAAF,EAAAE,KAAA,EAC9B0K,MAAM,yBAADhR,OAA0BqF,EAAY,iCAAArF,OAAgCkR,EAAKxP,GAAE,2BAA2B,CAAE+E,QAAAA,IAAW,KAAD,EAAlI,OAAd0K,EAAc/K,EAAAM,KAAAN,EAAAE,KAAA,EACK6K,EAAeF,OAAO,KAAD,EAA9B7K,EAAAM,KAELC,MAAM+H,SAAQ,SAAA4C,IACD,IAAlBA,EAAM/N,SAAqC,WAAjB+N,EAAMrI,OAClCsH,IAEAC,GAEJ,IAAG,wBAAApK,EAAAuB,OAAA,GAAA/B,EAAA,KAEN,gBAAA2L,GAAA,OAAAlF,EAAAzE,MAAA,KAAAC,UAAE,CAAF,CAbuC,IAatCkJ,EAAAzK,KAAA,GAEIQ,QAAQC,IAAI+J,GAAc,KAAD,GAC/BL,EAAQ,CAAEF,QAAAA,EAASC,QAAAA,IACnBvD,GAAW,GAAO8D,EAAAzK,KAAA,iBAAAyK,EAAA1K,KAAA,GAAA0K,EAAAvJ,GAAAuJ,EAAA,SAGlBtJ,QAAQC,MAAM,wBAAuBqJ,EAAAvJ,IAAS,yBAAAuJ,EAAApJ,OAAA,GAAAgJ,EAAA,mBAEjD,kBAzCwB,OAAAxS,EAAAyJ,MAAA,KAAAC,UAAA,MA2CzBnD,EAAAA,EAAAA,YAAU,WACRgM,GACF,GAAG,IAUH,OACE5R,EAAAA,EAAAA,KAAA,OAAAJ,SACGqK,GAAUjK,EAAAA,EAAAA,KAAC0S,EAAAA,EAAe,CAAC5R,MAAO,CAAEC,SAAU,IAAM4R,MAAI,KACvD3S,EAAAA,EAAAA,KAAC4S,EAAAA,EAAS,CACRlN,QAXa,CACnBnB,MAAO,CACLI,KAAM,OAERkI,OAAQ,CAAC,YAAa,gBAQhB1G,OAAQ,CAACD,EAAKuL,QAASvL,EAAKwL,SAC5B/M,KAAK,MACLiG,MAAM,SAKhB,E,kIC6CA,GArG6B,SAAHvL,GAAiD,IAA3CwT,EAAYxT,EAAZwT,aAAcC,EAAOzT,EAAPyT,QAASC,EAAY1T,EAAZ0T,aAC7CC,GAAQC,EAAAA,EAAAA,UAAQ,WAClB,OAAiB,OAAZJ,QAAY,IAAZA,GAAAA,EAAc3G,QAAkB,OAAP4G,QAAO,IAAPA,GAAAA,EAAS5G,OAErB2G,EAAa/K,KAAI,SAAAoL,GAC/B,IAAMC,EAAcL,EAAQ9F,QAAO,SAAAoG,GAAC,OAAIA,EAAEC,WAAWzQ,KAAOsQ,EAAKtQ,EAAE,IAC7D0Q,GAAsB,OAAZP,QAAY,IAAZA,OAAY,EAAZA,EAAc/F,QAAO,SAAAxJ,GAAE,OAAIA,EAAG6P,WAAWzQ,KAAOsQ,EAAKtQ,EAAE,MAAK,GACtE2Q,GAAaC,EAAAA,GAAAA,GAAQ,IAAIjL,KAAQ,IAEjCkL,EAASN,EAAYnG,QAAO,SAAAoG,GAAC,OAC/B,IAAI7K,KAAK6K,EAAEM,OAAOC,MAAQJ,CAAU,IACtCrH,OAEF,MAAO,CACHtJ,GAAIsQ,EAAKtQ,GACTqD,KAAMiN,EAAKjN,KACX2N,aAAcT,EAAYjH,OAC1B2H,cAAeJ,EACfK,QAASR,EAAQtG,QAAO,SAAAxJ,GAAE,MAAkB,WAAdA,EAAG2G,MAAmB,IAAE+B,OACtD6H,QAAS,IAAIxE,IAAI4D,EAAYrL,KAAI,SAAAsL,GAAC,OAAIA,EAAEM,OAAOzN,IAAI,KAAG5E,KAE9D,IAEiB+G,MAAK,SAACC,EAAGC,GAAC,OAAKA,EAAEsL,aAAevL,EAAEuL,YAAY,IArBT,IAsB1D,GAAG,CAACf,EAAcC,EAASC,IAE3B,IAAKC,EAAO,OAAO,KAEnB,IAAMgB,EAAY,CACdnH,OAAQmG,EAAMlL,KAAI,SAAAoL,GAAI,OAAIA,EAAKjN,IAAI,IACnCgO,SAAU,CACN,CACIhT,MAAO,gBACPiF,KAAM8M,EAAMlL,KAAI,SAAAoL,GAAI,OAAIA,EAAKU,YAAY,IACzC5I,gBAAiB,WAErB,CACI/J,MAAO,gBACPiF,KAAM8M,EAAMlL,KAAI,SAAAoL,GAAI,OAAIA,EAAKW,aAAa,IAC1C7I,gBAAiB,aAK7B,OACInL,EAAAA,EAAAA,MAACsC,EAAAA,GAAI,CAACC,WAAS,EAAC/B,QAAS,EAAET,SAAA,EACvBI,EAAAA,EAAAA,KAACmC,EAAAA,GAAI,CAACE,MAAI,EAACG,GAAI,GAAG5C,UACdI,EAAAA,EAAAA,KAACkU,EAAAA,EAAI,CAAAtU,UACDC,EAAAA,EAAAA,MAACsU,GAAAA,EAAW,CAAAvU,SAAA,EACRI,EAAAA,EAAAA,KAACM,EAAAA,EAAU,CAACC,QAAQ,KAAK6T,cAAY,EAAAxU,SAAC,yDAGtCI,EAAAA,EAAAA,KAACC,EAAAA,EAAG,CAACC,GAAI,CAAEwE,OAAQ,KAAM9E,UACrBI,EAAAA,EAAAA,KAACqU,GAAAA,GAAG,CAACnO,KAAM8N,EAAWtO,QAAS4O,GAAAA,eAK/CtU,EAAAA,EAAAA,KAACmC,EAAAA,GAAI,CAACE,MAAI,EAACG,GAAI,GAAG5C,UACdI,EAAAA,EAAAA,KAACkU,EAAAA,EAAI,CAAAtU,UACDC,EAAAA,EAAAA,MAACsU,GAAAA,EAAW,CAAAvU,SAAA,EACRI,EAAAA,EAAAA,KAACM,EAAAA,EAAU,CAACC,QAAQ,KAAK6T,cAAY,EAAAxU,SAAC,oDAGtCC,EAAAA,EAAAA,MAAC0U,GAAAA,EAAK,CAAA3U,SAAA,EACFI,EAAAA,EAAAA,KAACwU,GAAAA,EAAS,CAAA5U,UACNC,EAAAA,EAAAA,MAAC4U,GAAAA,EAAQ,CAAA7U,SAAA,EACLI,EAAAA,EAAAA,KAAC0U,GAAAA,EAAS,CAAA9U,SAAC,gBACXI,EAAAA,EAAAA,KAAC0U,GAAAA,EAAS,CAAC9K,MAAM,QAAOhK,SAAC,mBACzBI,EAAAA,EAAAA,KAAC0U,GAAAA,EAAS,CAAC9K,MAAM,QAAOhK,SAAC,mBACzBI,EAAAA,EAAAA,KAAC0U,GAAAA,EAAS,CAAC9K,MAAM,QAAOhK,SAAC,qBACzBI,EAAAA,EAAAA,KAAC0U,GAAAA,EAAS,CAAC9K,MAAM,QAAOhK,SAAC,6BACzBI,EAAAA,EAAAA,KAAC0U,GAAAA,EAAS,CAAC9K,MAAM,QAAOhK,SAAC,mBAGjCI,EAAAA,EAAAA,KAAC2U,GAAAA,EAAS,CAAA/U,SACLoT,EAAMlL,KAAI,SAAAoL,GAAI,OACXrT,EAAAA,EAAAA,MAAC4U,GAAAA,EAAQ,CAAA7U,SAAA,EACLI,EAAAA,EAAAA,KAAC0U,GAAAA,EAAS,CAAA9U,SAAEsT,EAAKjN,QACjBjG,EAAAA,EAAAA,KAAC0U,GAAAA,EAAS,CAAC9K,MAAM,QAAOhK,SAAEsT,EAAKU,gBAC/B5T,EAAAA,EAAAA,KAAC0U,GAAAA,EAAS,CAAC9K,MAAM,QAAOhK,SAAEsT,EAAKW,iBAC/B7T,EAAAA,EAAAA,KAAC0U,GAAAA,EAAS,CAAC9K,MAAM,QAAOhK,SAAEsT,EAAKY,WAC/B9T,EAAAA,EAAAA,KAAC0U,GAAAA,EAAS,CAAC9K,MAAM,QAAOhK,SAAEsT,EAAKa,WAC/B/T,EAAAA,EAAAA,KAAC0U,GAAAA,EAAS,CAAC9K,MAAM,QAAOhK,UACpBI,EAAAA,EAAAA,KAACU,EAAAA,EAAI,CACDW,KAAK,QACL9B,MAAO2T,EAAKW,cAAgB,EAAI,UAAY,UAC5C5S,MAAOiS,EAAKW,cAAgB,EAAI,QAAU,cAVvCX,EAAKtQ,GAaT,kBAS/C,E,gGCoDA,GA3JsB,SAAHvD,GAAmC,IAA7ByT,EAAOzT,EAAPyT,QAASC,EAAY1T,EAAZ0T,aACxB6B,GAAS3B,EAAAA,EAAAA,UAAQ,WAAO,IAAD4B,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EACzB,GAAY,OAAPpC,QAAO,IAAPA,IAAAA,EAAS5G,OAAQ,OAAO,KAE7B,IAAMiJ,GAAYC,EAAAA,GAAAA,GAAU,IAAI7M,KAAQ,GAClC8M,EAAU,IAAI9M,KAKd+M,GAFQC,EAAAA,GAAAA,GAAmB,CAAEC,MAAOL,EAAWM,IAAKJ,IAEhCvN,KAAI,SAAA4N,GAC1B,IAAMC,GAAYC,EAAAA,GAAAA,GAAYF,GACxBG,GAAUC,EAAAA,GAAAA,GAAUJ,GAEpBK,EAAcjD,EAAQ9F,QAAO,SAAAgJ,GAC/B,IAAMC,EAAa,IAAI1N,KAAKyN,EAAOtC,OAAOC,MAC1C,OAAOsC,GAAcN,GAAaM,GAAcJ,CACpD,IAEMK,GAAsB,OAAZnD,QAAY,IAAZA,OAAY,EAAZA,EAAc/F,QAAO,SAAAxJ,GACjC,IAAM2S,EAAS,IAAI5N,KAAK/E,EAAG4S,cAC3B,OAAOD,GAAUR,GAAaQ,GAAUN,CAC5C,MAAM,GAEN,MAAO,CACHH,MAAMW,EAAAA,GAAAA,GAAOX,EAAM,SAAU,CAAEY,OAAQC,GAAAA,IACvCzD,QAASiD,EAAY7J,OACrBsK,IAAKN,EAAQhK,OACb6H,QAAS,IAAIxE,IAAIwG,EAAYjO,KAAI,SAAAsL,GAAC,OAAIA,EAAEM,OAAOzN,IAAI,KAAG5E,KAE9D,IAYA,MAAO,CAAEiU,YAAAA,EAAamB,OATP,CACX3D,QAC+C,OADD,QAAnC+B,EAAAS,EAAYA,EAAYpJ,OAAS,UAAE,IAAA2I,OAAA,EAAnCA,EAAqC/B,UAAW,KACnC,QAAdgC,EAAAQ,EAAY,UAAE,IAAAR,OAAA,EAAdA,EAAgBhC,UAAW,GAAK,GAC1C0D,IACwC,OADE,QAAnCzB,EAAAO,EAAYA,EAAYpJ,OAAS,UAAE,IAAA6I,OAAA,EAAnCA,EAAqCyB,MAAO,KAC9B,QAAdxB,EAAAM,EAAY,UAAE,IAAAN,OAAA,EAAdA,EAAgBwB,MAAO,GAAK,GACnCzC,QAC+C,OADD,QAAnCkB,EAAAK,EAAYA,EAAYpJ,OAAS,UAAE,IAAA+I,OAAA,EAAnCA,EAAqClB,UAAW,KACnC,QAAdmB,EAAAI,EAAY,UAAE,IAAAJ,OAAA,EAAdA,EAAgBnB,UAAW,GAAK,IAIlD,GAAG,CAACjB,EAASC,IAEb,IAAK6B,EAAQ,OAAO,KAEpB,IAAMZ,EAAY,CACdnH,OAAQ+H,EAAOU,YAAYxN,KAAI,SAAA4O,GAAI,OAAIA,EAAKhB,IAAI,IAChDzB,SAAU,CACN,CACIhT,MAAO,YACPiF,KAAM0O,EAAOU,YAAYxN,KAAI,SAAA4O,GAAI,OAAIA,EAAK5D,OAAO,IACjD9P,YAAa,UACb2T,QAAS,IAEb,CACI1V,MAAO,kBACPiF,KAAM0O,EAAOU,YAAYxN,KAAI,SAAA4O,GAAI,OAAIA,EAAKF,GAAG,IAC7CxT,YAAa,UACb2T,QAAS,IAEb,CACI1V,MAAO,4BACPiF,KAAM0O,EAAOU,YAAYxN,KAAI,SAAA4O,GAAI,OAAIA,EAAK3C,OAAO,IACjD/Q,YAAa,UACb2T,QAAS,MAKrB,OACI9W,EAAAA,EAAAA,MAACsC,EAAAA,GAAI,CAACC,WAAS,EAAC/B,QAAS,EAAET,SAAA,EACvBI,EAAAA,EAAAA,KAACmC,EAAAA,GAAI,CAACE,MAAI,EAACG,GAAI,GAAG5C,UACdI,EAAAA,EAAAA,KAACkU,EAAAA,EAAI,CAAAtU,UACDC,EAAAA,EAAAA,MAACsU,GAAAA,EAAW,CAAAvU,SAAA,EACRI,EAAAA,EAAAA,KAACM,EAAAA,EAAU,CAACC,QAAQ,KAAK6T,cAAY,EAAAxU,SAAC,gCAGtCI,EAAAA,EAAAA,KAACC,EAAAA,EAAG,CAACC,GAAI,CAAEwE,OAAQ,KAAM9E,UACrBI,EAAAA,EAAAA,KAAC4W,GAAAA,GAAI,CAAC1Q,KAAM8N,EAAWtO,QAASmR,GAAAA,eAKhD7W,EAAAA,EAAAA,KAACmC,EAAAA,GAAI,CAACE,MAAI,EAACG,GAAI,GAAIF,GAAI,EAAE1C,UACrBI,EAAAA,EAAAA,KAACkU,EAAAA,EAAI,CAAAtU,UACDC,EAAAA,EAAAA,MAACsU,GAAAA,EAAW,CAAAvU,SAAA,EACRI,EAAAA,EAAAA,KAACM,EAAAA,EAAU,CAACC,QAAQ,KAAK6T,cAAY,EAAAxU,SAAC,oCAGtCI,EAAAA,EAAAA,KAAC8W,GAAAA,EAAO,CAACtX,MAAM,4BAAqBI,UAChCC,EAAAA,EAAAA,MAACI,EAAAA,EAAG,CAACC,GAAI,CAAE6W,GAAI,GAAInX,SAAA,EACfC,EAAAA,EAAAA,MAACS,EAAAA,EAAU,CAACC,QAAQ,KAAKhB,MAAOqV,EAAO6B,OAAO3D,QAAU,EAAI,eAAiB,aAAalT,SAAA,CACrFgV,EAAO6B,OAAO3D,QAAQvJ,QAAQ,GAAG,QAEtCvJ,EAAAA,EAAAA,KAACgX,GAAAA,EAAc,CACXzW,QAAQ,cACRsH,MAAOoP,KAAKC,IAAID,KAAKE,IAAIvC,EAAO6B,OAAO3D,SAAU,KACjDvT,MAAOqV,EAAO6B,OAAO3D,QAAU,EAAI,UAAY,QAC/C5S,GAAI,CAAE6W,GAAI,kBAOlC/W,EAAAA,EAAAA,KAACmC,EAAAA,GAAI,CAACE,MAAI,EAACG,GAAI,GAAIF,GAAI,EAAE1C,UACrBI,EAAAA,EAAAA,KAACkU,EAAAA,EAAI,CAAAtU,UACDC,EAAAA,EAAAA,MAACsU,GAAAA,EAAW,CAAAvU,SAAA,EACRI,EAAAA,EAAAA,KAACM,EAAAA,EAAU,CAACC,QAAQ,KAAK6T,cAAY,EAAAxU,SAAC,gCAGtCI,EAAAA,EAAAA,KAAC8W,GAAAA,EAAO,CAACtX,MAAM,4BAAqBI,UAChCC,EAAAA,EAAAA,MAACI,EAAAA,EAAG,CAACC,GAAI,CAAE6W,GAAI,GAAInX,SAAA,EACfC,EAAAA,EAAAA,MAACS,EAAAA,EAAU,CAACC,QAAQ,KAAKhB,MAAOqV,EAAO6B,OAAOD,IAAM,EAAI,eAAiB,aAAa5W,SAAA,CACjFgV,EAAO6B,OAAOD,IAAIjN,QAAQ,GAAG,QAElCvJ,EAAAA,EAAAA,KAACgX,GAAAA,EAAc,CACXzW,QAAQ,cACRsH,MAAOoP,KAAKC,IAAID,KAAKE,IAAIvC,EAAO6B,OAAOD,KAAM,KAC7CjX,MAAOqV,EAAO6B,OAAOD,IAAM,EAAI,UAAY,QAC3CtW,GAAI,CAAE6W,GAAI,kBAOlC/W,EAAAA,EAAAA,KAACmC,EAAAA,GAAI,CAACE,MAAI,EAACG,GAAI,GAAIF,GAAI,EAAE1C,UACrBI,EAAAA,EAAAA,KAACkU,EAAAA,EAAI,CAAAtU,UACDC,EAAAA,EAAAA,MAACsU,GAAAA,EAAW,CAAAvU,SAAA,EACRI,EAAAA,EAAAA,KAACM,EAAAA,EAAU,CAACC,QAAQ,KAAK6T,cAAY,EAAAxU,SAAC,8CAGtCI,EAAAA,EAAAA,KAAC8W,GAAAA,EAAO,CAACtX,MAAM,4BAAqBI,UAChCC,EAAAA,EAAAA,MAACI,EAAAA,EAAG,CAACC,GAAI,CAAE6W,GAAI,GAAInX,SAAA,EACfC,EAAAA,EAAAA,MAACS,EAAAA,EAAU,CAACC,QAAQ,KAAKhB,MAAOqV,EAAO6B,OAAO1C,QAAU,EAAI,eAAiB,aAAanU,SAAA,CACrFgV,EAAO6B,OAAO1C,QAAQxK,QAAQ,GAAG,QAEtCvJ,EAAAA,EAAAA,KAACgX,GAAAA,EAAc,CACXzW,QAAQ,cACRsH,MAAOoP,KAAKC,IAAID,KAAKE,IAAIvC,EAAO6B,OAAO1C,SAAU,KACjDxU,MAAOqV,EAAO6B,OAAO1C,QAAU,EAAI,UAAY,QAC/C7T,GAAI,CAAE6W,GAAI,mBAS9C,E,YC7CA,GA3G2B,SAAH1X,GAAmC,IAA7ByT,EAAOzT,EAAPyT,QAASC,EAAY1T,EAAZ0T,aAC7BqE,GAAUnE,EAAAA,EAAAA,UAAQ,WACpB,GAAY,OAAPH,QAAO,IAAPA,IAAAA,EAAS5G,OAAQ,OAAO,KAG7B,IAAMmL,GAA+B,OAAZtE,QAAY,IAAZA,OAAY,EAAZA,EACnB/F,QAAO,SAAAxJ,GAAE,MAAkB,cAAdA,EAAG2G,MAAsB,IACvCrC,KAAI,SAAAtE,GAAE,MAAK,CACRZ,GAAIY,EAAG8T,cACP9X,MAAOgE,EAAGhE,MACV2J,UAAUoO,EAAAA,GAAAA,GACN,IAAIhP,KAAK/E,EAAGgU,YACZ,IAAIjP,KAAK/E,EAAG4S,eAEnB,MAAM,GAaX,MAAO,CACHiB,iBAAAA,EACAI,gBAZoB3E,EAAQrG,QAAO,SAACC,EAAKsJ,GACzC,IAAMtC,EAASsC,EAAOtC,OAAOzN,KACvB0N,GAAO0C,EAAAA,GAAAA,GAAO,IAAI9N,KAAKyN,EAAOtC,OAAOC,MAAO,WAKlD,OAHKjH,EAAIgH,KAAShH,EAAIgH,GAAU,CAAC,GACjChH,EAAIgH,GAAQC,IAASjH,EAAIgH,GAAQC,IAAS,GAAK,EAExCjH,CACX,GAAG,CAAC,GAKAgL,oBAAqBL,EAAiB5K,QAAO,SAACC,EAAKlJ,GAAE,OAAKkJ,EAAMlJ,EAAG2F,QAAQ,GAAE,IACxDkO,EAAiBnL,QAAU,GAExD,GAAG,CAAC4G,EAASC,IAEb,OAAKqE,GAGDvX,EAAAA,EAAAA,MAACsC,EAAAA,GAAI,CAACC,WAAS,EAAC/B,QAAS,EAAET,SAAA,EACvBI,EAAAA,EAAAA,KAACmC,EAAAA,GAAI,CAACE,MAAI,EAACG,GAAI,GAAIF,GAAI,EAAE1C,UACrBI,EAAAA,EAAAA,KAACkU,EAAAA,EAAI,CAAAtU,UACDC,EAAAA,EAAAA,MAACsU,GAAAA,EAAW,CAAAvU,SAAA,EACRI,EAAAA,EAAAA,KAACM,EAAAA,EAAU,CAACC,QAAQ,KAAK6T,cAAY,EAAAxU,SAAC,mCAGtCC,EAAAA,EAAAA,MAAC0U,GAAAA,EAAK,CAAClT,KAAK,QAAOzB,SAAA,EACfI,EAAAA,EAAAA,KAACwU,GAAAA,EAAS,CAAA5U,UACNC,EAAAA,EAAAA,MAAC4U,GAAAA,EAAQ,CAAA7U,SAAA,EACLI,EAAAA,EAAAA,KAAC0U,GAAAA,EAAS,CAAA9U,SAAC,UACXI,EAAAA,EAAAA,KAAC0U,GAAAA,EAAS,CAAA9U,SAAC,sBACXI,EAAAA,EAAAA,KAAC0U,GAAAA,EAAS,CAAC9K,MAAM,QAAOhK,SAAC,2BAGjCI,EAAAA,EAAAA,KAAC2U,GAAAA,EAAS,CAAA/U,SACLwX,EAAQC,iBAAiBvP,KAAI,SAAAtE,GAAE,OAC5B3D,EAAAA,EAAAA,MAAC4U,GAAAA,EAAQ,CAAA7U,SAAA,EACLI,EAAAA,EAAAA,KAAC0U,GAAAA,EAAS,CAAA9U,SAAE4D,EAAGZ,MACf5C,EAAAA,EAAAA,KAAC0U,GAAAA,EAAS,CAAA9U,SAAE4D,EAAGhE,SACfQ,EAAAA,EAAAA,KAAC0U,GAAAA,EAAS,CAAC9K,MAAM,QAAOhK,SAAE4D,EAAG2F,aAHlB3F,EAAGZ,GAIP,UAIvB5C,EAAAA,EAAAA,KAACC,EAAAA,EAAG,CAACC,GAAI,CAAE6W,GAAI,GAAInX,UACfC,EAAAA,EAAAA,MAACS,EAAAA,EAAU,CAACC,QAAQ,YAAYhB,MAAM,gBAAeK,SAAA,CAAC,sCAC1BwX,EAAQM,oBAAoBnO,QAAQ,GAAG,uBAMnFvJ,EAAAA,EAAAA,KAACmC,EAAAA,GAAI,CAACE,MAAI,EAACG,GAAI,GAAIF,GAAI,EAAE1C,UACrBI,EAAAA,EAAAA,KAACkU,EAAAA,EAAI,CAAAtU,UACDC,EAAAA,EAAAA,MAACsU,GAAAA,EAAW,CAAAvU,SAAA,EACRI,EAAAA,EAAAA,KAACM,EAAAA,EAAU,CAACC,QAAQ,KAAK6T,cAAY,EAAAxU,SAAC,mDAGtCC,EAAAA,EAAAA,MAAC0U,GAAAA,EAAK,CAAClT,KAAK,QAAOzB,SAAA,EACfI,EAAAA,EAAAA,KAACwU,GAAAA,EAAS,CAAA5U,UACNC,EAAAA,EAAAA,MAAC4U,GAAAA,EAAQ,CAAA7U,SAAA,EACLI,EAAAA,EAAAA,KAAC0U,GAAAA,EAAS,CAAA9U,SAAC,sBACXI,EAAAA,EAAAA,KAAC0U,GAAAA,EAAS,CAAC9K,MAAM,QAAOhK,SAAC,WACzBI,EAAAA,EAAAA,KAAC0U,GAAAA,EAAS,CAAC9K,MAAM,QAAOhK,SAAC,sBAGjCI,EAAAA,EAAAA,KAAC2U,GAAAA,EAAS,CAAA/U,SACLkN,OAAOQ,QAAQ8J,EAAQK,iBAAiB3P,KAAI,SAAAyF,GAAuB,IAAD8D,GAAA5L,EAAAA,EAAAA,GAAA8H,EAAA,GAApBmG,EAAMrC,EAAA,GAAEsG,EAAMtG,EAAA,GACnDuG,GAAevB,EAAAA,GAAAA,GAAO,IAAI9N,KAAQ,WAClCsP,GAAYxB,EAAAA,GAAAA,GAAO,IAAI9N,MAAK,IAAIA,MAAOuP,UAAS,IAAIvP,MAAOwP,WAAa,IAAK,WAEnF,OACIlY,EAAAA,EAAAA,MAAC4U,GAAAA,EAAQ,CAAA7U,SAAA,EACLI,EAAAA,EAAAA,KAAC0U,GAAAA,EAAS,CAAA9U,SAAE8T,KACZ1T,EAAAA,EAAAA,KAAC0U,GAAAA,EAAS,CAAC9K,MAAM,QAAOhK,SAAE+X,EAAOC,IAAiB,KAClD5X,EAAAA,EAAAA,KAAC0U,GAAAA,EAAS,CAAC9K,MAAM,QAAOhK,SAAE+X,EAAOE,IAAc,MAHpCnE,EAMvB,mBA9DP,IAsEzB,ECmBA,GA3GkB,WAEd,IAAArP,GAAwCC,EAAAA,EAAAA,UAAS,IAAGkB,GAAAC,EAAAA,EAAAA,GAAApB,EAAA,GAA7C2T,EAAYxS,EAAA,GAAEyS,EAAezS,EAAA,GACpCQ,GAAkC1B,EAAAA,EAAAA,UAAS,IAAGoJ,GAAAjI,EAAAA,EAAAA,GAAAO,EAAA,GAAvCkS,EAASxK,EAAA,GAAEyK,EAAYzK,EAAA,GAChBmF,GAAiBuF,EAAAA,EAAAA,MAAvBlS,KACM4M,GAAYuF,EAAAA,EAAAA,MAAlBnS,KACM6M,GAAiBuF,EAAAA,EAAAA,MAAvBpS,KAyBR,OAvBAN,EAAAA,EAAAA,YAAU,WACN,IAAM2S,EAAa,eAAAlZ,GAAAsH,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAC,IAAA,IAAAC,EAAA,OAAAH,EAAAA,EAAAA,KAAAS,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAC,KAAA,EAAAD,EAAAE,KAAA,GAEiBgR,EAAAA,EAAAA,MAAiB,KAAD,EAAzCzR,EAAgBO,EAAAM,KACtBqQ,EAAgBlR,EAAiBb,KAAKzG,OAAO6H,EAAAE,KAAA,gBAAAF,EAAAC,KAAA,EAAAD,EAAAoB,GAAApB,EAAA,SAE7CqB,QAAQC,MAAM,2BAA0BtB,EAAAoB,IAAS,yBAAApB,EAAAuB,OAAA,GAAA/B,EAAA,kBAExD,kBAPkB,OAAAzH,EAAAyJ,MAAA,KAAAC,UAAA,KASb0P,EAAU,eAAAlL,GAAA5G,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAgL,IAAA,IAAA6G,EAAA,OAAA9R,EAAAA,EAAAA,KAAAS,MAAA,SAAA4K,GAAA,cAAAA,EAAA1K,KAAA0K,EAAAzK,MAAA,cAAAyK,EAAA1K,KAAA,EAAA0K,EAAAzK,KAAA,GAEiBmR,EAAAA,EAAAA,KAAyB,KAAD,EAA9CD,EAAazG,EAAArK,KACnBuQ,EAAaO,EAAcxS,KAAK0S,YAAY3G,EAAAzK,KAAA,gBAAAyK,EAAA1K,KAAA,EAAA0K,EAAAvJ,GAAAuJ,EAAA,SAE5CtJ,QAAQC,MAAM,wBAAuBqJ,EAAAvJ,IAAS,yBAAAuJ,EAAApJ,OAAA,GAAAgJ,EAAA,kBAErD,kBAPe,OAAAtE,EAAAzE,MAAA,KAAAC,UAAA,KAShBwP,IACAE,GACJ,GAAG,KAGCzY,EAAAA,EAAAA,KAAC6Y,EAAAA,EAAa,CAAAjZ,UACVC,EAAAA,EAAAA,MAACsC,EAAAA,GAAI,CAACC,WAAS,EAAC0W,WAAY,IAAKC,cAAe,EAAEnZ,SAAA,EAE9CI,EAAAA,EAAAA,KAACmC,EAAAA,GAAI,CAACE,MAAI,EAACG,GAAI,GAAG5C,UACdI,EAAAA,EAAAA,KAACgZ,EAAa,OAElBhZ,EAAAA,EAAAA,KAACmC,EAAAA,GAAI,CAACE,MAAI,EAACG,GAAI,GAAID,GAAI,EAAGD,GAAI,EAAG2W,GAAI,EAAErZ,UACnCI,EAAAA,EAAAA,KAACkZ,EAAiB,CAAC1Z,MAAM,qBAAqBC,OAAO,IAAI8I,MAAO4Q,qBAAqBvZ,UACjFI,EAAAA,EAAAA,KAACoZ,EAAc,SAGvBvZ,EAAAA,EAAAA,MAACsC,EAAAA,GAAI,CAACE,MAAI,EAACG,GAAI,GAAID,GAAI,EAAGD,GAAI,EAAG2W,GAAI,EAAErZ,SAAA,EACnCI,EAAAA,EAAAA,KAACkZ,EAAiB,CAAC1Z,MAAM,iBAAiBC,MAAOuY,EAAa7K,cAG9DnN,EAAAA,EAAAA,KAACkZ,EAAiB,CAAC1Z,MAAM,cAAcC,MAAOyY,EAAU/K,iBAI5DnN,EAAAA,EAAAA,KAACmC,EAAAA,GAAI,CAACE,MAAI,EAACG,GAAI,GAAID,GAAI,EAAGD,GAAI,EAAG2W,GAAI,EAAErZ,UACnCI,EAAAA,EAAAA,KAACkZ,EAAiB,CAAC1Z,MAAM,qBAAoBI,UACzCI,EAAAA,EAAAA,KAACqZ,EAAwB,SAGjCrZ,EAAAA,EAAAA,KAACmC,EAAAA,GAAI,CAACE,MAAI,EAACG,GAAI,GAAID,GAAI,EAAGD,GAAI,EAAG2W,GAAI,EAAErZ,UACnCI,EAAAA,EAAAA,KAACkZ,EAAiB,CAAC1Z,MAAM,mBAAkBI,UACvCI,EAAAA,EAAAA,KAACsZ,EAAuB,SAGhCtZ,EAAAA,EAAAA,KAACmC,EAAAA,GAAI,CAACE,MAAI,EAACG,GAAI,GAAG5C,UACdI,EAAAA,EAAAA,KAAC6Y,EAAAA,EAAa,CAAAjZ,UACVI,EAAAA,EAAAA,KAACuZ,EAAe,SAGxBvZ,EAAAA,EAAAA,KAACmC,EAAAA,GAAI,CAACE,MAAI,EAACG,GAAI,GAAG5C,UACdI,EAAAA,EAAAA,KAACwZ,EAAiB,OAEtBxZ,EAAAA,EAAAA,KAACmC,EAAAA,GAAI,CAACE,MAAI,EAACG,GAAI,GAAG5C,UACdI,EAAAA,EAAAA,KAACyZ,EAAoB,OAEzBzZ,EAAAA,EAAAA,KAACmC,EAAAA,GAAI,CAACE,MAAI,EAACG,GAAI,GAAG5C,UACdI,EAAAA,EAAAA,KAAC0Z,EAAwB,OAE7B1Z,EAAAA,EAAAA,KAACmC,EAAAA,GAAI,CAACE,MAAI,EAACG,GAAI,GAAG5C,UACdI,EAAAA,EAAAA,KAAC6Y,EAAAA,EAAa,CAAAjZ,UACVI,EAAAA,EAAAA,KAAC2Z,EAA4B,SAGrC3Z,EAAAA,EAAAA,KAACmC,EAAAA,GAAI,CAACE,MAAI,EAACG,GAAI,GAAG5C,UACdI,EAAAA,EAAAA,KAAC4Z,GAAa,CACV9G,QAASA,EACTC,aAAcA,OAGtB/S,EAAAA,EAAAA,KAACmC,EAAAA,GAAI,CAACE,MAAI,EAACG,GAAI,GAAG5C,UACdI,EAAAA,EAAAA,KAAC6Z,GAAkB,CACf/G,QAASA,EACTC,aAAcA,OAGtB/S,EAAAA,EAAAA,KAACmC,EAAAA,GAAI,CAACE,MAAI,EAACG,GAAI,GAAG5C,UACdI,EAAAA,EAAAA,KAAC8Z,GAAoB,CACjBjH,aAAcA,EACdC,QAASA,EACTC,aAAcA,UAStC,C","sources":["components/cards/statistics/AnalyticsDataCard.js","sections/dashboard/WelcomeBanner.js","sections/dashboard/UsersCardChart.js","sections/dashboard/LastBuildsChart.js","sections/dashboard/last20builds.js","components/LoadingScreen.js","components/ErrorDisplay.js","components/DataContainer.js","sections/dashboard/WorkItemsPieChart.js","sections/admin/workitems-list/Workitems.js","sections/admin/workitems-list/WorkitemsDone.js","sections/dashboard/SelfHostedAgentsPieChart.js","sections/dashboard/DeploymentPoolsPieChart.js","sections/admin/repositories/RepositoryComparison.js","sections/admin/analytics/TrendAnalysis.js","sections/admin/analytics/PerformanceMetrics.js","pages/dashboard/index.js"],"sourcesContent":["import PropTypes from 'prop-types';\r\n\r\n// material-ui\r\nimport { Box, Chip, Stack, Typography } from '@mui/material';\r\n\r\n// project import\r\nimport MainCard from 'components/MainCard';\r\n\r\n// assets\r\nimport { RiseOutlined, FallOutlined } from '@ant-design/icons';\r\n\r\n// ==============================|| STATISTICS - ECOMMERCE CARD ||============================== //\r\n\r\nconst AnalyticsDataCard = ({ color = 'primary', title, count, percentage, isLoss, children }) => (\r\n  <MainCard content={false}>\r\n    <Box sx={{ p: 2.25 }}>\r\n      <Stack spacing={0.5}>\r\n        <Typography variant=\"h6\" color=\"textSecondary\">\r\n          {title}\r\n        </Typography>\r\n        <Stack direction=\"row\" alignItems=\"center\">\r\n          <Typography variant=\"h4\" color=\"inherit\">\r\n            {count}\r\n          </Typography>\r\n          {percentage && (\r\n            <Chip\r\n              variant=\"combined\"\r\n              color={color}\r\n              icon={\r\n                <>\r\n                  {!isLoss && <RiseOutlined style={{ fontSize: '0.75rem', color: 'inherit' }} />}\r\n                  {isLoss && <FallOutlined style={{ fontSize: '0.75rem', color: 'inherit' }} />}\r\n                </>\r\n              }\r\n              label={`${percentage}%`}\r\n              sx={{ ml: 1.25, pl: 1 }}\r\n              size=\"small\"\r\n            />\r\n          )}\r\n        </Stack>\r\n      </Stack>\r\n    </Box>\r\n    {children}\r\n  </MainCard>\r\n);\r\n\r\nAnalyticsDataCard.propTypes = {\r\n  title: PropTypes.string,\r\n  count: PropTypes.string,\r\n  percentage: PropTypes.number,\r\n  isLoss: PropTypes.bool,\r\n  color: PropTypes.string,\r\n  children: PropTypes.node\r\n};\r\n\r\nexport default AnalyticsDataCard;\r\n","// material-ui\r\nimport { Grid, Typography, Button, Stack, Box } from '@mui/material';\r\nimport { useTheme } from '@mui/material/styles';\r\n\r\n// project import\r\nimport MainCard from 'components/MainCard';\r\nimport { ThemeMode, ThemeDirection } from 'config';\r\n\r\n// assets\r\nimport WelcomeImage from 'assets/images/analytics/welcome-banner.png';\r\nimport WelcomeImageArrow from 'assets/images/analytics/welcome-arrow.png';\r\n\r\n// third-party\r\nimport { FormattedMessage } from 'react-intl';\r\n\r\n// ==============================|| ANALYTICS - WELCOME ||============================== //\r\n\r\nconst WelcomeBanner = () => {\r\n  const theme = useTheme();\r\n\r\n  return (\r\n    <MainCard\r\n      border={false}\r\n      sx={{\r\n        background:\r\n          theme.direction === ThemeDirection.RTL\r\n            ? `linear-gradient(60.38deg, ${theme.palette.primary.lighter} 114%, ${theme.palette.primary.light} 34.42%, ${theme.palette.primary.main} 60.95%, ${theme.palette.primary.dark} 84.83%, ${theme.palette.primary.darker} 104.37%)`\r\n            : `linear-gradient(250.38deg, ${theme.palette.primary.lighter} 2.39%, ${theme.palette.primary.light} 34.42%, ${theme.palette.primary.main} 60.95%, ${theme.palette.primary.dark} 84.83%, ${theme.palette.primary.darker} 104.37%)`\r\n      }}\r\n    >\r\n      <Grid container>\r\n        <Grid item md={6} sm={6} xs={12}>\r\n          <Stack spacing={2} sx={{ padding: 3.4 }}>\r\n            <Typography variant=\"h2\" color={theme.palette.background.paper}>\r\n              <FormattedMessage id=\"welcome\" />\r\n            </Typography>\r\n            <Typography variant=\"h6\" color={theme.palette.background.paper}>\r\n              Never accessed users affected cost, pipeline agent useage and effective useage of MS Hosted free agents.\r\n            </Typography>\r\n            <Box>\r\n              <Button\r\n                disableElevation\r\n                variant=\"outlined\"\r\n                color=\"secondary\"\r\n                sx={{\r\n                  cursor: 'default',\r\n                  color: theme.palette.background.paper,\r\n                  borderColor: theme.palette.background.paper,\r\n                  '&:hover': {\r\n                    color: 'background.paper',\r\n                    borderColor: theme.palette.background.paper,\r\n                    bgcolor: theme.palette.mode === ThemeMode.DARK ? 'primary.darker' : 'primary.main'\r\n                  }\r\n                }}\r\n              >\r\n                ORGANIZATION : {process.env.REACT_APP_ORGANIZATION}\r\n              </Button>\r\n            </Box>\r\n          </Stack>\r\n        </Grid>\r\n        <Grid item sm={6} xs={12} sx={{ display: { xs: 'none', sm: 'initial' } }}>\r\n          <Stack sx={{ position: 'relative', pr: { sm: 3, md: 8 } }} justifyContent=\"center\" alignItems=\"flex-end\">\r\n            <img src={WelcomeImage} alt=\"Welcome\" />\r\n            <Box sx={{ position: 'absolute', bottom: 0, right: '10%' }}>\r\n              <img src={WelcomeImageArrow} alt=\"Welcome Arrow\" />\r\n            </Box>\r\n          </Stack>\r\n        </Grid>\r\n      </Grid>\r\n    </MainCard>\r\n  );\r\n};\r\n\r\nexport default WelcomeBanner;\r\n","import { useState, useEffect } from 'react';\r\n\r\n// material-ui\r\nimport { useTheme } from '@mui/material/styles';\r\n\r\n// project import\r\nimport { ThemeMode } from 'config';\r\nimport useConfig from 'hooks/useConfig';\r\n\r\n// third-party\r\nimport ReactApexChart from 'react-apexcharts';\r\n\r\n// ==============================|| USER CARD CHART ||============================== //\r\n\r\nconst UsersCardChart = () => {\r\n  const theme = useTheme();\r\n  const { mode } = useConfig();\r\n\r\n  // chart options\r\n  const areaChartOptions = {\r\n    chart: {\r\n      id: 'new-stack-chart',\r\n      sparkline: {\r\n        enabled: true\r\n      },\r\n      height: 100,\r\n      type: 'bar',\r\n      toolbar: {\r\n        show: false\r\n      },\r\n      offsetX: -4\r\n    },\r\n    dataLabels: {\r\n      enabled: false\r\n    },\r\n    plotOptions: {\r\n      bar: {\r\n        columnWidth: '80%'\r\n      }\r\n    },\r\n    tooltip: {\r\n      x: {\r\n        show: false\r\n      },\r\n      y: {\r\n        formatter(val) {\r\n          return `- ${val}`;\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  const { primary, secondary } = theme.palette.text;\r\n  const line = theme.palette.divider;\r\n\r\n  const [options, setOptions] = useState(areaChartOptions);\r\n\r\n  useEffect(() => {\r\n    setOptions((prevState) => ({\r\n      ...prevState,\r\n      colors: [theme.palette.primary.main, theme.palette.primary[700]],\r\n      theme: {\r\n        mode: mode === ThemeMode.DARK ? 'dark' : 'light'\r\n      }\r\n    }));\r\n  }, [mode, primary, secondary, line, theme]);\r\n\r\n  const [series] = useState([\r\n    {\r\n      name: 'Users',\r\n      data: [\r\n        220, 230, 240, 220, 225, 215, 205, 195, 185, 150, 185, 195, 80, 205, 215, 225, 240, 225, 215, 205, 80, 215, 225, 240, 215, 210, 190\r\n      ]\r\n    }\r\n  ]);\r\n\r\n  return <ReactApexChart options={options} series={series} type=\"bar\" height={100} />;\r\n};\r\n\r\nexport default UsersCardChart;\r\n","import { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\n\r\n// material-ui\r\nimport { useTheme } from '@mui/material/styles';\r\n\r\n// project import\r\nimport { ThemeMode } from 'config';\r\nimport useConfig from 'hooks/useConfig';\r\n\r\n// third-party\r\nimport ApexCharts from 'react-apexcharts';\r\nimport moment from 'moment';\r\n\r\nconst pat = process.env.REACT_APP_API_PAT;\r\nconst token = btoa(`:${pat}`);\r\nconst organization = 'nadidurna1';\r\n\r\n// ==============================|| LAST BUILDS CHART ||============================== //\r\n\r\nconst LastBuildsChart = () => {\r\n  const theme = useTheme();\r\n  const { mode } = useConfig();\r\n\r\n  const [builds, setBuilds] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const fetchProjectsAndBuilds = async () => {\r\n      try {\r\n        // Organizasyondaki projeleri çek\r\n        const projectsResponse = await axios.get(\r\n          `https://dev.azure.com/${organization}/_apis/projects?api-version=7.0`,\r\n          {\r\n            headers: {\r\n              'Authorization': `Basic ${token}`,\r\n              'Content-Type': 'application/json'\r\n            },\r\n          }\r\n        );\r\n\r\n        const projects = projectsResponse.data.value;\r\n\r\n        // Her proje için API çağrılarını paralel yap\r\n        const buildPromises = projects.map(project =>\r\n          axios.get(\r\n            `https://dev.azure.com/${organization}/${project.name}/_apis/build/builds?api-version=7.0&$top=20`,\r\n            {\r\n              headers: {\r\n                'Authorization': `Basic ${token}`,\r\n                'Content-Type': 'application/json'\r\n              },\r\n            }\r\n          )\r\n        );\r\n\r\n        const buildResponses = await Promise.all(buildPromises);\r\n\r\n        // Gelen sonuçları birleştir\r\n        let allBuilds = buildResponses.flatMap(response => response.data.value);\r\n\r\n        // Build'leri başlangıç zamanına göre sıralayıp ilk 20 tanesini seç\r\n        const sortedBuilds = allBuilds\r\n          .sort((a, b) => new Date(b.startTime) - new Date(a.startTime))\r\n          .slice(0, 20);\r\n\r\n        setBuilds(sortedBuilds);\r\n      } catch (error) {\r\n        console.error('Error fetching builds:', error);\r\n      }\r\n    };\r\n\r\n    fetchProjectsAndBuilds();\r\n  }, []);\r\n\r\n  // Build sürelerini hesapla (sayı olarak)\r\n  const buildDurations = builds.map((build) => {\r\n    const startTime = moment(build.startTime);\r\n    const finishTime = moment(build.finishTime);\r\n    const duration = finishTime.diff(startTime, 'seconds');\r\n    // const duration = (finishTime - startTime) / 1000 / 60; // Süreyi dakikaya çeviriyoruz\r\n    return {\r\n      name: build.project.name, // Proje adını kullanıyoruz\r\n      duration: parseFloat(duration.toFixed(2)), // Süreyi sayısal olarak döndürüyoruz\r\n    };\r\n  });\r\n\r\n  // ApexCharts options ve series ayarları\r\n  const chartOptions = {\r\n    chart: {\r\n      type: 'bar',\r\n    },\r\n    xaxis: {\r\n      categories: buildDurations.map(build => build.name), // Proje adlarını göster\r\n      title: {\r\n        text: 'Project Name'\r\n      }\r\n    },\r\n    yaxis: {\r\n      title: {\r\n        text: 'Duration (seconds)'\r\n      }\r\n    },\r\n    title: {\r\n      text: 'Last 20 Builds',\r\n      align: 'center',\r\n      style: {\r\n        fontSize: '20px'\r\n      }\r\n    }\r\n  };\r\n\r\n  const chartSeries = [{\r\n    name: 'Duration',\r\n    data: buildDurations.map(build => build.duration) // Sayısal veri olarak süre\r\n  }];\r\n\r\n  return (\r\n  <ApexCharts\r\n    options={chartOptions}\r\n    series={chartSeries}\r\n    type=\"bar\"\r\n    height={350}\r\n  />)\r\n};\r\n\r\nexport default LastBuildsChart;\r\n","import React from 'react';\r\nimport { useAzureDevOps } from 'hooks/useAzureDevOps';\r\n\r\nconst AzureDevOpsBuilds = () => {\r\n    const { builds, loading, error } = useAzureDevOps();\r\n\r\n    if (loading) return <div>Yükleniyor...</div>;\r\n    if (error) return <div>Hata: {error.message}</div>;\r\n\r\n    return (\r\n        <div>\r\n            <h1>Organizasyon İçindeki Tüm Projelerden Son 20 Build</h1>\r\n            <ul>\r\n                {builds.map((build) => (\r\n                    <li key={build.id}>\r\n                        Proje: {build.project.name} - Build ID: {build.id} - Status: {build.status} -\r\n                        Result: {build.result} - Başlangıç Zamanı: {new Date(build.startTime).toLocaleString()}\r\n                    </li>\r\n                ))}\r\n            </ul>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default AzureDevOpsBuilds;\r\n","import { Box, CircularProgress, Typography } from '@mui/material';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst LoadingScreen = ({ message = 'Yükleniyor...', fullScreen = false }) => {\r\n    const content = (\r\n        <Box\r\n            display=\"flex\"\r\n            flexDirection=\"column\"\r\n            alignItems=\"center\"\r\n            justifyContent=\"center\"\r\n            gap={2}\r\n            sx={{ \r\n                p: 3,\r\n                minHeight: fullScreen ? '100vh' : '200px',\r\n                width: '100%'\r\n            }}\r\n        >\r\n            <CircularProgress />\r\n            {message && (\r\n                <Typography variant=\"body2\" color=\"textSecondary\">\r\n                    {message}\r\n                </Typography>\r\n            )}\r\n        </Box>\r\n    );\r\n\r\n    if (fullScreen) {\r\n        return (\r\n            <Box\r\n                sx={{\r\n                    position: 'fixed',\r\n                    top: 0,\r\n                    left: 0,\r\n                    right: 0,\r\n                    bottom: 0,\r\n                    backgroundColor: 'background.paper',\r\n                    zIndex: 9999\r\n                }}\r\n            >\r\n                {content}\r\n            </Box>\r\n        );\r\n    }\r\n\r\n    return content;\r\n};\r\n\r\nLoadingScreen.propTypes = {\r\n    message: PropTypes.string,\r\n    fullScreen: PropTypes.bool\r\n};\r\n\r\nexport default LoadingScreen; \r\n","import { Alert, Button, Typography } from '@mui/material';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst ErrorDisplay = ({ error, onRetry }) => {\r\n    const isApiError = error?.response?.status;\r\n    \r\n    const getErrorMessage = () => {\r\n        if (isApiError) {\r\n            switch (error.response.status) {\r\n                case 401:\r\n                    return 'Oturum süreniz dolmuş olabilir. Lütfen yeniden giriş yapın.';\r\n                case 403:\r\n                    return 'Bu işlem için yetkiniz bulunmuyor.';\r\n                case 404:\r\n                    return 'İstenen kaynak bulunamadı.';\r\n                case 500:\r\n                    return 'Sunucu hatası oluştu. Lütfen daha sonra tekrar deneyin.';\r\n                default:\r\n                    return error.message || 'Bir hata oluştu';\r\n            }\r\n        }\r\n        return error?.message || 'Beklenmeyen bir hata oluştu';\r\n    };\r\n\r\n    return (\r\n        <Alert \r\n            severity=\"error\"\r\n            action={\r\n                onRetry && (\r\n                    <Button \r\n                        color=\"inherit\" \r\n                        size=\"small\"\r\n                        onClick={onRetry}\r\n                    >\r\n                        Yeniden Dene\r\n                    </Button>\r\n                )\r\n            }\r\n        >\r\n            <Typography variant=\"subtitle2\">\r\n                {getErrorMessage()}\r\n            </Typography>\r\n        </Alert>\r\n    );\r\n};\r\n\r\nErrorDisplay.propTypes = {\r\n    error: PropTypes.object.isRequired,\r\n    onRetry: PropTypes.func\r\n};\r\n\r\nexport default ErrorDisplay; \r\n","import { Box } from '@mui/material';\r\nimport PropTypes from 'prop-types';\r\nimport LoadingScreen from './LoadingScreen';\r\nimport ErrorDisplay from './ErrorDisplay';\r\nimport NoData from './NoData';\r\n\r\nconst DataContainer = ({\r\n    loading,\r\n    error,\r\n    data,\r\n    onRetry,\r\n    loadingMessage,\r\n    errorMessage,\r\n    noDataMessage,\r\n    children,\r\n    sx = {}\r\n}) => {\r\n    if (loading) {\r\n        return <LoadingScreen message={loadingMessage} />;\r\n    }\r\n\r\n    if (error) {\r\n        return (\r\n            <ErrorDisplay \r\n                error={error}\r\n                message={errorMessage}\r\n                onRetry={onRetry}\r\n            />\r\n        );\r\n    }\r\n\r\n    if (!data || (Array.isArray(data) && data.length === 0)) {\r\n        return <NoData message={noDataMessage} />;\r\n    }\r\n\r\n    return (\r\n        <Box sx={sx}>\r\n            {children}\r\n        </Box>\r\n    );\r\n};\r\n\r\nDataContainer.propTypes = {\r\n    loading: PropTypes.bool,\r\n    error: PropTypes.object,\r\n    data: PropTypes.any,\r\n    onRetry: PropTypes.func,\r\n    loadingMessage: PropTypes.string,\r\n    errorMessage: PropTypes.string,\r\n    noDataMessage: PropTypes.string,\r\n    children: PropTypes.node,\r\n    sx: PropTypes.object\r\n};\r\n\r\nexport default DataContainer; \r\n","import React, { useState, useEffect } from 'react';\r\nimport { fetchAllProjects, fetchWorkItemsForProject, fetchWorkItemDetails } from 'services/AzureDevOpsService';\r\nimport { useWorkItems } from 'hooks/useAzureDevOps';\r\nimport DataContainer from 'components/DataContainer';\r\nimport ApexCharts from 'react-apexcharts';\r\n\r\nconst WorkItemsPieChart = () => {\r\n    const { data: workItems, loading, error, refresh } = useWorkItems();\r\n\r\n    // System.State durumuna göre gruplama\r\n    const stateCounts = workItems.reduce((acc, item) => {\r\n        const state = item.fields['System.State'];\r\n        // undefined olanları saymamaya dikkat et\r\n        if (state) {\r\n            acc[state] = (acc[state] || 0) + 1;\r\n        }\r\n        return acc;\r\n    }, {});\r\n\r\n    // ApexCharts için Pie Chart yapılandırması\r\n    const chartOptions = {\r\n        labels: Object.keys(stateCounts).filter(label => label),  // Boş veya undefined label'ları filtrele\r\n        title: {\r\n            text: 'Work Items by State',\r\n            align: 'center',\r\n            style: {\r\n                fontSize: '20px'\r\n            }\r\n        },\r\n        legend: {\r\n            position: 'bottom'\r\n        },\r\n        tooltip: {\r\n            y: {\r\n                formatter: (val) => (val !== undefined && val !== null) ? val.toString() : ''  // undefined değerleri kontrol et\r\n            }\r\n        }\r\n    };\r\n\r\n    // Series verilerinin boş olup olmadığını kontrol et\r\n    const chartSeries = Object.values(stateCounts).filter(val => val !== undefined && val !== null);\r\n    // console.log(\"State Counts:\", stateCounts);\r\n    // console.log(\"Chart Series:\", chartSeries);\r\n\r\n    return (\r\n        <DataContainer\r\n            loading={loading}\r\n            error={error}\r\n            data={workItems}\r\n            onRetry={refresh}\r\n            loadingMessage=\"Work item'lar yükleniyor...\"\r\n            noDataMessage=\"Henüz work item bulunmuyor\"\r\n        >\r\n            <ApexCharts\r\n                options={chartOptions}\r\n                series={chartSeries}\r\n                type=\"pie\"\r\n                height={600}\r\n                width={'100%'}\r\n            />\r\n        </DataContainer>\r\n    );\r\n};\r\n\r\nexport default WorkItemsPieChart;\r\n","import { useAzureDevOps } from 'hooks/useAzureDevOps';\r\n\r\nconst AzureDevOpsWorkItems = () => {\r\n    const { workItems, loading, error } = useAzureDevOps();\r\n\r\n    if (loading) return <div>Yükleniyor...</div>;\r\n    if (error) return <div>Hata: {error.message}</div>;\r\n    \r\n    // System.State durumuna göre gruplama\r\n    const stateCounts = workItems.reduce((acc, item) => {\r\n        const state = item.fields['System.State'];\r\n        // undefined olanları saymamaya dikkat et\r\n        if (state) {\r\n            acc[state] = (acc[state] || 0) + 1;\r\n        }\r\n        return acc;\r\n    }, {});\r\n\r\n    return (\r\n        <div>\r\n            <h1>Work Items</h1>\r\n            <ul>\r\n                {Object.entries(stateCounts).map(([key, value]) => (\r\n                    <li key={key}>\r\n                        {key}: {value}\r\n                    </li>\r\n                ))}\r\n            </ul>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default AzureDevOpsWorkItems;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { fetchAllProjects, fetchProcesses, fetchStateCategory, fetchWorkItemsForProject, fetchWorkItemDetails } from 'services/AzureDevOpsService';\r\n\r\nconst WorkitemsDone = () => {\r\n    const [workItems, setWorkItems] = useState([]);\r\n    const [completionPercentage, setCompletionPercentage] = useState({});\r\n    const [stateCategoryMap, setStateCategoryMap] = useState({});\r\n    const [loading, setLoading] = useState(true);\r\n    const [error, setError] = useState(null);\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            try {\r\n                setLoading(true);\r\n                \r\n                // Projeleri ve process tiplerini çek\r\n                const projects = await fetchAllProjects();\r\n                const projectProcessMap = await fetchProcesses();\r\n\r\n                // State kategorilerini çek\r\n                const tempStateCategoryMap = {};\r\n                for (const projectName in projectProcessMap) {\r\n                    tempStateCategoryMap[projectName] = await fetchStateCategory(projectProcessMap[projectName]);\r\n                }\r\n                setStateCategoryMap(tempStateCategoryMap);\r\n\r\n                // Work itemları çek\r\n                let allWorkItems = [];\r\n                let workItemIdsSet = new Set();\r\n\r\n                for (const project of projects) {\r\n                    const workItemIds = await fetchWorkItemsForProject(project.name);\r\n                    workItemIds.forEach(item => {\r\n                        if (item?.id && !workItemIdsSet.has(item.id)) {\r\n                            workItemIdsSet.add(item.id);\r\n                        }\r\n                    });\r\n                }\r\n\r\n                // Work item detaylarını çek\r\n                const idsArray = Array.from(workItemIdsSet);\r\n                while (idsArray.length > 0) {\r\n                    const chunk = idsArray.splice(0, 200);\r\n                    const details = await fetchWorkItemDetails(chunk, 'System.TeamProject,System.IterationPath,System.IterationLevel1,System.IterationLevel2,System.State,System.AssignedTo');\r\n                    allWorkItems = [...allWorkItems, ...details];\r\n                }\r\n\r\n                setWorkItems(allWorkItems);\r\n            } catch (err) {\r\n                setError(err);\r\n            } finally {\r\n                setLoading(false);\r\n            }\r\n        };\r\n\r\n        fetchData();\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        const stateCounts = {};\r\n        let sprintCounts = {};\r\n        let completionData = {};\r\n\r\n        // Work Item'ları dolaşarak State sayımlarını yap\r\n        workItems.forEach((item) => {\r\n            const state = item.fields['System.State'];\r\n            const teamProject = item.fields['System.TeamProject'];\r\n            const iterationLevel1 = item.fields['System.IterationLevel1'];\r\n            const iterationLevel2 = item.fields['System.IterationLevel2'];\r\n\r\n            // Eğer iterationLevel2 yoksa işleme alma\r\n            if (!iterationLevel2) return;\r\n\r\n            // Parent grup anahtarını oluştur (TeamProject + IterationLevel1)\r\n            const parentGroup = `${teamProject} - ${iterationLevel1}`;\r\n            const sprintName = iterationLevel2;\r\n\r\n            // console.log(`Parent Group: ${parentGroup}, Sprint: ${sprintName}, State: ${state}`);\r\n\r\n            // State sayımlarını yap\r\n            if (state) {\r\n                if (!stateCounts[parentGroup]) {\r\n                    stateCounts[parentGroup] = {};\r\n                }\r\n                if (!stateCounts[parentGroup][sprintName]) {\r\n                    stateCounts[parentGroup][sprintName] = { Done: 0, InProgress: 0 };\r\n                }\r\n                if (!sprintCounts[parentGroup]) {\r\n                    sprintCounts[parentGroup] = {};\r\n                }\r\n                if (!sprintCounts[parentGroup][sprintName]) {\r\n                    sprintCounts[parentGroup][sprintName] = { total: 0, completed: 0 };\r\n                }\r\n\r\n                sprintCounts[parentGroup][sprintName].total++;\r\n\r\n                // State kategorisi Completed olanlara göre sayım yap\r\n                if (stateCategoryMap[teamProject]?.[state] === 'Completed') {\r\n                    sprintCounts[parentGroup][sprintName].completed++;\r\n                }\r\n            }\r\n        });\r\n\r\n        // Yüzdeyi hesapla\r\n        Object.keys(sprintCounts).forEach((parentGroup) => {\r\n            Object.keys(sprintCounts[parentGroup]).forEach((sprintName) => {\r\n                const { total, completed } = sprintCounts[parentGroup][sprintName];\r\n                const percentage = total > 0 ? (completed / total) * 100 : 0;\r\n                if (!completionData[parentGroup]) {\r\n                    completionData[parentGroup] = {};\r\n                }\r\n                completionData[parentGroup][sprintName] = percentage.toFixed(2);\r\n            });\r\n        });\r\n\r\n        setCompletionPercentage(completionData);\r\n    }, [workItems]);\r\n\r\n    return (\r\n        <div>\r\n            <h1>Work Items Done Rate</h1>\r\n            <strong>Team Project - Iteration Level 1</strong>\r\n            <ul>\r\n                {Object.entries(completionPercentage).map(([parentGroup, sprints]) => (\r\n                    <li key={parentGroup}>\r\n                        <strong>{parentGroup}</strong>\r\n                        <ul>\r\n                            {Object.entries(sprints).map(([sprintName, percentage]) => (\r\n                                <li key={sprintName}>\r\n                                    {sprintName} için tamamlanan: %{percentage}\r\n                                </li>\r\n                            ))}\r\n                        </ul>\r\n                    </li>\r\n                ))}\r\n            </ul>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default WorkitemsDone;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport ApexChart from \"react-apexcharts\"; // Assuming you are using ApexCharts\r\nimport { LoadingOutlined } from '@ant-design/icons'; // for a loading indicator\r\n\r\nconst SelfHostedAgentsPieChart = () => {\r\n  const [data, setData] = useState({ running: 0, stopped: 0 });\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  const fetchPoolsAndAgents = async () => {\r\n    const pat = process.env.REACT_APP_API_PAT;\r\n    const token = btoa(`:${pat}`);\r\n    const organization = 'nadidurna1';\r\n\r\n    const headers = {\r\n      \"Authorization\": `Basic ${token}`,\r\n      \"Content-Type\": \"application/json\"\r\n    };\r\n\r\n    try {\r\n      // Fetch all pools\r\n      const poolsResponse = await fetch(`https://dev.azure.com/${organization}/_apis/distributedtask/pools?api-version=7.2-preview.1`, { headers });\r\n      const poolsData = await poolsResponse.json();\r\n\r\n      let running = 0;\r\n      let stopped = 0;\r\n\r\n      // For each pool, fetch the agents and filter based on the conditions\r\n      const poolPromises = poolsData.value.map(async (pool) => {\r\n        if (pool.isHosted === false && pool.poolType === \"automation\") {\r\n          const agentsResponse = await fetch(`https://dev.azure.com/${organization}/_apis/distributedtask/pools/${pool.id}/agents?api-version=7.0`, { headers });\r\n          const agentsData = await agentsResponse.json();\r\n\r\n          agentsData.value.forEach(agent => {\r\n            if (agent.enabled === true && agent.status === \"online\") {\r\n              running++;\r\n            } else {\r\n              stopped++;\r\n            }\r\n          });\r\n        }\r\n      });\r\n\r\n      await Promise.all(poolPromises);\r\n      setData({ running, stopped });\r\n      setLoading(false);\r\n\r\n    } catch (error) {\r\n      console.error(\"Error fetching data: \", error);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchPoolsAndAgents();\r\n  }, []);\r\n\r\n  // Chart configuration\r\n  const chartOptions = {\r\n    chart: {\r\n      type: 'pie',\r\n    },\r\n    labels: ['Available', 'Unavailable'],\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {loading ? <LoadingOutlined style={{ fontSize: 24 }} spin /> : (\r\n        <ApexChart\r\n          options={chartOptions}\r\n          series={[data.running, data.stopped]}\r\n          type=\"pie\"\r\n          width=\"500\"\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SelfHostedAgentsPieChart;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport ApexChart from \"react-apexcharts\"; // Assuming you are using ApexCharts\r\nimport { LoadingOutlined } from '@ant-design/icons'; // for a loading indicator\r\n\r\nconst DeploymentPoolsPieChart = () => {\r\n  const [data, setData] = useState({ running: 0, stopped: 0 });\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  const fetchPoolsAndAgents = async () => {\r\n    const pat = process.env.REACT_APP_API_PAT;\r\n    const token = btoa(`:${pat}`);\r\n    const organization = 'nadidurna1';\r\n\r\n    const headers = {\r\n      \"Authorization\": `Basic ${token}`,\r\n      \"Content-Type\": \"application/json\"\r\n    };\r\n\r\n    try {\r\n      // Fetch all pools\r\n      const poolsResponse = await fetch(`https://dev.azure.com/${organization}/_apis/distributedtask/pools?api-version=7.2-preview.1`, { headers });\r\n      const poolsData = await poolsResponse.json();\r\n\r\n      let running = 0;\r\n      let stopped = 0;\r\n\r\n      // For each pool, fetch the agents and filter based on the conditions\r\n      const poolPromises = poolsData.value.map(async (pool) => {\r\n        if (pool.isHosted === false && pool.poolType === \"deployment\") {\r\n          const agentsResponse = await fetch(`https://dev.azure.com/${organization}/_apis/distributedtask/pools/${pool.id}/agents?api-version=7.0`, { headers });\r\n          const agentsData = await agentsResponse.json();\r\n\r\n          agentsData.value.forEach(agent => {\r\n            if (agent.enabled === true && agent.status === \"online\") {\r\n              running++;\r\n            } else {\r\n              stopped++;\r\n            }\r\n          });\r\n        }\r\n      });\r\n\r\n      await Promise.all(poolPromises);\r\n      setData({ running, stopped });\r\n      setLoading(false);\r\n\r\n    } catch (error) {\r\n      console.error(\"Error fetching data: \", error);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchPoolsAndAgents();\r\n  }, []);\r\n\r\n  // Chart configuration\r\n  const chartOptions = {\r\n    chart: {\r\n      type: 'pie',\r\n    },\r\n    labels: ['Available', 'Unavailable'],\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {loading ? <LoadingOutlined style={{ fontSize: 24 }} spin /> : (\r\n        <ApexChart\r\n          options={chartOptions}\r\n          series={[data.running, data.stopped]}\r\n          type=\"pie\"\r\n          width=\"500\"\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DeploymentPoolsPieChart;\r\n","import React, { useMemo } from 'react';\r\nimport { \r\n    Card, \r\n    CardContent, \r\n    Typography, \r\n    Grid, \r\n    Box,\r\n    Table,\r\n    TableBody,\r\n    TableCell,\r\n    TableHead,\r\n    TableRow,\r\n    Chip\r\n} from '@mui/material';\r\nimport { Bar } from 'react-chartjs-2';\r\nimport { format, subDays } from 'date-fns';\r\nimport { tr } from 'date-fns/locale';\r\nimport { barChartOptions } from 'utils/chartConfig';\r\n\r\nconst RepositoryComparison = ({ repositories, commits, pullRequests }) => {\r\n    const stats = useMemo(() => {\r\n        if (!repositories?.length || !commits?.length) return null;\r\n\r\n        const repoStats = repositories.map(repo => {\r\n            const repoCommits = commits.filter(c => c.repository.id === repo.id);\r\n            const repoPRs = pullRequests?.filter(pr => pr.repository.id === repo.id) || [];\r\n            const last30Days = subDays(new Date(), 30);\r\n\r\n            const recent = repoCommits.filter(c => \r\n                new Date(c.author.date) > last30Days\r\n            ).length;\r\n\r\n            return {\r\n                id: repo.id,\r\n                name: repo.name,\r\n                totalCommits: repoCommits.length,\r\n                recentCommits: recent,\r\n                openPRs: repoPRs.filter(pr => pr.status === 'active').length,\r\n                authors: new Set(repoCommits.map(c => c.author.name)).size\r\n            };\r\n        });\r\n\r\n        return repoStats.sort((a, b) => b.totalCommits - a.totalCommits);\r\n    }, [repositories, commits, pullRequests]);\r\n\r\n    if (!stats) return null;\r\n\r\n    const chartData = {\r\n        labels: stats.map(repo => repo.name),\r\n        datasets: [\r\n            {\r\n                label: 'Toplam Commit',\r\n                data: stats.map(repo => repo.totalCommits),\r\n                backgroundColor: '#2196F3'\r\n            },\r\n            {\r\n                label: 'Son 30 Gün',\r\n                data: stats.map(repo => repo.recentCommits),\r\n                backgroundColor: '#4CAF50'\r\n            }\r\n        ]\r\n    };\r\n\r\n    return (\r\n        <Grid container spacing={3}>\r\n            <Grid item xs={12}>\r\n                <Card>\r\n                    <CardContent>\r\n                        <Typography variant=\"h6\" gutterBottom>\r\n                            Repository Karşılaştırması\r\n                        </Typography>\r\n                        <Box sx={{ height: 400 }}>\r\n                            <Bar data={chartData} options={barChartOptions} />\r\n                        </Box>\r\n                    </CardContent>\r\n                </Card>\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n                <Card>\r\n                    <CardContent>\r\n                        <Typography variant=\"h6\" gutterBottom>\r\n                            Detaylı Karşılaştırma\r\n                        </Typography>\r\n                        <Table>\r\n                            <TableHead>\r\n                                <TableRow>\r\n                                    <TableCell>Repository</TableCell>\r\n                                    <TableCell align=\"right\">Toplam Commit</TableCell>\r\n                                    <TableCell align=\"right\">Son 30 Gün</TableCell>\r\n                                    <TableCell align=\"right\">Açık PR</TableCell>\r\n                                    <TableCell align=\"right\">Katkıda Bulunanlar</TableCell>\r\n                                    <TableCell align=\"right\">Aktivite</TableCell>\r\n                                </TableRow>\r\n                            </TableHead>\r\n                            <TableBody>\r\n                                {stats.map(repo => (\r\n                                    <TableRow key={repo.id}>\r\n                                        <TableCell>{repo.name}</TableCell>\r\n                                        <TableCell align=\"right\">{repo.totalCommits}</TableCell>\r\n                                        <TableCell align=\"right\">{repo.recentCommits}</TableCell>\r\n                                        <TableCell align=\"right\">{repo.openPRs}</TableCell>\r\n                                        <TableCell align=\"right\">{repo.authors}</TableCell>\r\n                                        <TableCell align=\"right\">\r\n                                            <Chip\r\n                                                size=\"small\"\r\n                                                color={repo.recentCommits > 0 ? 'success' : 'default'}\r\n                                                label={repo.recentCommits > 0 ? 'Aktif' : 'Pasif'}\r\n                                            />\r\n                                        </TableCell>\r\n                                    </TableRow>\r\n                                ))}\r\n                            </TableBody>\r\n                        </Table>\r\n                    </CardContent>\r\n                </Card>\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n\r\nexport default RepositoryComparison; \r\n","import React, { useMemo } from 'react';\r\nimport { \r\n    Card, \r\n    CardContent, \r\n    Typography, \r\n    Grid, \r\n    Box,\r\n    LinearProgress,\r\n    Tooltip\r\n} from '@mui/material';\r\nimport { Line } from 'react-chartjs-2';\r\nimport { format, subMonths, eachWeekOfInterval, startOfWeek, endOfWeek } from 'date-fns';\r\nimport { tr } from 'date-fns/locale';\r\nimport { lineChartOptions } from 'utils/chartConfig';\r\n\r\nconst TrendAnalysis = ({ commits, pullRequests }) => {\r\n    const trends = useMemo(() => {\r\n        if (!commits?.length) return null;\r\n\r\n        const startDate = subMonths(new Date(), 3);\r\n        const endDate = new Date();\r\n        \r\n        // Haftalık aralıkları oluştur\r\n        const weeks = eachWeekOfInterval({ start: startDate, end: endDate });\r\n        \r\n        const weeklyStats = weeks.map(week => {\r\n            const weekStart = startOfWeek(week);\r\n            const weekEnd = endOfWeek(week);\r\n            \r\n            const weekCommits = commits.filter(commit => {\r\n                const commitDate = new Date(commit.author.date);\r\n                return commitDate >= weekStart && commitDate <= weekEnd;\r\n            });\r\n\r\n            const weekPRs = pullRequests?.filter(pr => {\r\n                const prDate = new Date(pr.creationDate);\r\n                return prDate >= weekStart && prDate <= weekEnd;\r\n            }) || [];\r\n\r\n            return {\r\n                week: format(week, 'dd MMM', { locale: tr }),\r\n                commits: weekCommits.length,\r\n                prs: weekPRs.length,\r\n                authors: new Set(weekCommits.map(c => c.author.name)).size\r\n            };\r\n        });\r\n\r\n        // Büyüme oranları\r\n        const growth = {\r\n            commits: ((weeklyStats[weeklyStats.length - 1]?.commits || 0) / \r\n                     (weeklyStats[0]?.commits || 1) - 1) * 100,\r\n            prs: ((weeklyStats[weeklyStats.length - 1]?.prs || 0) / \r\n                  (weeklyStats[0]?.prs || 1) - 1) * 100,\r\n            authors: ((weeklyStats[weeklyStats.length - 1]?.authors || 0) / \r\n                     (weeklyStats[0]?.authors || 1) - 1) * 100\r\n        };\r\n\r\n        return { weeklyStats, growth };\r\n    }, [commits, pullRequests]);\r\n\r\n    if (!trends) return null;\r\n\r\n    const chartData = {\r\n        labels: trends.weeklyStats.map(stat => stat.week),\r\n        datasets: [\r\n            {\r\n                label: 'Commitler',\r\n                data: trends.weeklyStats.map(stat => stat.commits),\r\n                borderColor: '#2196F3',\r\n                tension: 0.1\r\n            },\r\n            {\r\n                label: 'Pull Requestler',\r\n                data: trends.weeklyStats.map(stat => stat.prs),\r\n                borderColor: '#4CAF50',\r\n                tension: 0.1\r\n            },\r\n            {\r\n                label: 'Aktif Geliştiriciler',\r\n                data: trends.weeklyStats.map(stat => stat.authors),\r\n                borderColor: '#FFC107',\r\n                tension: 0.1\r\n            }\r\n        ]\r\n    };\r\n\r\n    return (\r\n        <Grid container spacing={3}>\r\n            <Grid item xs={12}>\r\n                <Card>\r\n                    <CardContent>\r\n                        <Typography variant=\"h6\" gutterBottom>\r\n                            3 Aylık Trend Analizi\r\n                        </Typography>\r\n                        <Box sx={{ height: 400 }}>\r\n                            <Line data={chartData} options={lineChartOptions} />\r\n                        </Box>\r\n                    </CardContent>\r\n                </Card>\r\n            </Grid>\r\n            <Grid item xs={12} md={4}>\r\n                <Card>\r\n                    <CardContent>\r\n                        <Typography variant=\"h6\" gutterBottom>\r\n                            Commit Büyüme Oranı\r\n                        </Typography>\r\n                        <Tooltip title=\"Son 3 aydaki büyüme\">\r\n                            <Box sx={{ mt: 2 }}>\r\n                                <Typography variant=\"h4\" color={trends.growth.commits > 0 ? 'success.main' : 'error.main'}>\r\n                                    {trends.growth.commits.toFixed(1)}%\r\n                                </Typography>\r\n                                <LinearProgress \r\n                                    variant=\"determinate\" \r\n                                    value={Math.min(Math.abs(trends.growth.commits), 100)}\r\n                                    color={trends.growth.commits > 0 ? 'success' : 'error'}\r\n                                    sx={{ mt: 1 }}\r\n                                />\r\n                            </Box>\r\n                        </Tooltip>\r\n                    </CardContent>\r\n                </Card>\r\n            </Grid>\r\n            <Grid item xs={12} md={4}>\r\n                <Card>\r\n                    <CardContent>\r\n                        <Typography variant=\"h6\" gutterBottom>\r\n                            PR Büyüme Oranı\r\n                        </Typography>\r\n                        <Tooltip title=\"Son 3 aydaki büyüme\">\r\n                            <Box sx={{ mt: 2 }}>\r\n                                <Typography variant=\"h4\" color={trends.growth.prs > 0 ? 'success.main' : 'error.main'}>\r\n                                    {trends.growth.prs.toFixed(1)}%\r\n                                </Typography>\r\n                                <LinearProgress \r\n                                    variant=\"determinate\" \r\n                                    value={Math.min(Math.abs(trends.growth.prs), 100)}\r\n                                    color={trends.growth.prs > 0 ? 'success' : 'error'}\r\n                                    sx={{ mt: 1 }}\r\n                                />\r\n                            </Box>\r\n                        </Tooltip>\r\n                    </CardContent>\r\n                </Card>\r\n            </Grid>\r\n            <Grid item xs={12} md={4}>\r\n                <Card>\r\n                    <CardContent>\r\n                        <Typography variant=\"h6\" gutterBottom>\r\n                            Geliştirici Büyüme Oranı\r\n                        </Typography>\r\n                        <Tooltip title=\"Son 3 aydaki büyüme\">\r\n                            <Box sx={{ mt: 2 }}>\r\n                                <Typography variant=\"h4\" color={trends.growth.authors > 0 ? 'success.main' : 'error.main'}>\r\n                                    {trends.growth.authors.toFixed(1)}%\r\n                                </Typography>\r\n                                <LinearProgress \r\n                                    variant=\"determinate\" \r\n                                    value={Math.min(Math.abs(trends.growth.authors), 100)}\r\n                                    color={trends.growth.authors > 0 ? 'success' : 'error'}\r\n                                    sx={{ mt: 1 }}\r\n                                />\r\n                            </Box>\r\n                        </Tooltip>\r\n                    </CardContent>\r\n                </Card>\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n\r\nexport default TrendAnalysis; \r\n","import React, { useMemo } from 'react';\r\nimport { \r\n    Card, \r\n    CardContent, \r\n    Typography, \r\n    Grid, \r\n    Box,\r\n    Table,\r\n    TableBody,\r\n    TableCell,\r\n    TableHead,\r\n    TableRow\r\n} from '@mui/material';\r\nimport { format, differenceInDays } from 'date-fns';\r\nimport { tr } from 'date-fns/locale';\r\n\r\nconst PerformanceMetrics = ({ commits, pullRequests }) => {\r\n    const metrics = useMemo(() => {\r\n        if (!commits?.length) return null;\r\n\r\n        // PR çözüm süresi\r\n        const prResolutionTime = pullRequests\r\n            ?.filter(pr => pr.status === 'completed')\r\n            .map(pr => ({\r\n                id: pr.pullRequestId,\r\n                title: pr.title,\r\n                duration: differenceInDays(\r\n                    new Date(pr.closedDate),\r\n                    new Date(pr.creationDate)\r\n                )\r\n            })) || [];\r\n\r\n        // Commit sıklığı\r\n        const commitFrequency = commits.reduce((acc, commit) => {\r\n            const author = commit.author.name;\r\n            const date = format(new Date(commit.author.date), 'yyyy-MM');\r\n            \r\n            if (!acc[author]) acc[author] = {};\r\n            acc[author][date] = (acc[author][date] || 0) + 1;\r\n            \r\n            return acc;\r\n        }, {});\r\n\r\n        return {\r\n            prResolutionTime,\r\n            commitFrequency,\r\n            avgPRResolutionTime: prResolutionTime.reduce((acc, pr) => acc + pr.duration, 0) / \r\n                                (prResolutionTime.length || 1)\r\n        };\r\n    }, [commits, pullRequests]);\r\n\r\n    if (!metrics) return null;\r\n\r\n    return (\r\n        <Grid container spacing={3}>\r\n            <Grid item xs={12} md={6}>\r\n                <Card>\r\n                    <CardContent>\r\n                        <Typography variant=\"h6\" gutterBottom>\r\n                            PR Çözüm Süreleri\r\n                        </Typography>\r\n                        <Table size=\"small\">\r\n                            <TableHead>\r\n                                <TableRow>\r\n                                    <TableCell>PR #</TableCell>\r\n                                    <TableCell>Başlık</TableCell>\r\n                                    <TableCell align=\"right\">Süre (Gün)</TableCell>\r\n                                </TableRow>\r\n                            </TableHead>\r\n                            <TableBody>\r\n                                {metrics.prResolutionTime.map(pr => (\r\n                                    <TableRow key={pr.id}>\r\n                                        <TableCell>{pr.id}</TableCell>\r\n                                        <TableCell>{pr.title}</TableCell>\r\n                                        <TableCell align=\"right\">{pr.duration}</TableCell>\r\n                                    </TableRow>\r\n                                ))}\r\n                            </TableBody>\r\n                        </Table>\r\n                        <Box sx={{ mt: 2 }}>\r\n                            <Typography variant=\"subtitle2\" color=\"textSecondary\">\r\n                                Ortalama Çözüm Süresi: {metrics.avgPRResolutionTime.toFixed(1)} gün\r\n                            </Typography>\r\n                        </Box>\r\n                    </CardContent>\r\n                </Card>\r\n            </Grid>\r\n            <Grid item xs={12} md={6}>\r\n                <Card>\r\n                    <CardContent>\r\n                        <Typography variant=\"h6\" gutterBottom>\r\n                            Aylık Commit Sıklığı\r\n                        </Typography>\r\n                        <Table size=\"small\">\r\n                            <TableHead>\r\n                                <TableRow>\r\n                                    <TableCell>Geliştirici</TableCell>\r\n                                    <TableCell align=\"right\">Bu Ay</TableCell>\r\n                                    <TableCell align=\"right\">Geçen Ay</TableCell>\r\n                                </TableRow>\r\n                            </TableHead>\r\n                            <TableBody>\r\n                                {Object.entries(metrics.commitFrequency).map(([author, months]) => {\r\n                                    const currentMonth = format(new Date(), 'yyyy-MM');\r\n                                    const lastMonth = format(new Date(new Date().setMonth(new Date().getMonth() - 1)), 'yyyy-MM');\r\n                                    \r\n                                    return (\r\n                                        <TableRow key={author}>\r\n                                            <TableCell>{author}</TableCell>\r\n                                            <TableCell align=\"right\">{months[currentMonth] || 0}</TableCell>\r\n                                            <TableCell align=\"right\">{months[lastMonth] || 0}</TableCell>\r\n                                        </TableRow>\r\n                                    );\r\n                                })}\r\n                            </TableBody>\r\n                        </Table>\r\n                    </CardContent>\r\n                </Card>\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n\r\nexport default PerformanceMetrics; \r\n","import { useEffect, useState } from 'react';\r\n\r\n// material-ui\r\nimport { useTheme } from '@mui/material/styles';\r\nimport {\r\n    Grid\r\n} from '@mui/material';\r\n\r\n// project import\r\nimport AnalyticsDataCard from 'components/cards/statistics/AnalyticsDataCard';\r\nimport WelcomeBanner from 'sections/dashboard/WelcomeBanner';\r\nimport UsersCardChart from 'sections/dashboard/UsersCardChart';\r\nimport LastBuildsChart from 'sections/dashboard/LastBuildsChart';\r\n\r\nimport { GetAll as GetAllProjects } from 'api/ProjectsApi';\r\nimport { GetAll as GetAllUserEntitlements } from 'api/UserEntitlementsApi';\r\n\r\n// third-party\r\nimport { FormattedMessage } from 'react-intl';\r\nimport AzureDevOpsBuilds from 'sections/dashboard/last20builds';\r\nimport AzureDevOpsWorkItemsPieChart from 'sections/dashboard/WorkItemsPieChart';\r\nimport AzureDevOpsWorkItems from 'sections/admin/workitems-list/Workitems';\r\nimport AzureDevOpsWorkItemsDone from 'sections/admin/workitems-list/WorkitemsDone';\r\nimport SelfHostedAgentsPieChart from 'sections/dashboard/SelfHostedAgentsPieChart';\r\nimport DeploymentPoolsPieChart from 'sections/dashboard/DeploymentPoolsPieChart';\r\nimport ErrorBoundary from 'components/ErrorBoundary';\r\nimport RepositoryComparison from 'sections/admin/repositories/RepositoryComparison';\r\nimport { useCommits, useRepositories, usePullRequests } from 'hooks/useAzureDevOps';\r\nimport TrendAnalysis from 'sections/admin/analytics/TrendAnalysis';\r\nimport PerformanceMetrics from 'sections/admin/analytics/PerformanceMetrics';\r\n\r\n// ==============================|| DASHBOARD ||============================== //\r\n\r\nconst Dashboard = () => {\r\n\r\n    const [projectCount, setProjectCount] = useState([]);\r\n    const [userCount, setUserCount] = useState([]);\r\n    const { data: repositories } = useRepositories();\r\n    const { data: commits } = useCommits();\r\n    const { data: pullRequests } = usePullRequests();\r\n\r\n    useEffect(() => {\r\n        const fetchProjects = async () => {\r\n            try {\r\n                const projectsResponse = await GetAllProjects();\r\n                setProjectCount(projectsResponse.data.count);\r\n            } catch (error) {\r\n                console.error('Error fetching projects:', error);\r\n            }\r\n        };\r\n\r\n        const fetchUsers = async () => {\r\n            try {\r\n                const usersResponse = await GetAllUserEntitlements();\r\n                setUserCount(usersResponse.data.totalCount);\r\n            } catch (error) {\r\n                console.error('Error fetching users:', error);\r\n            }\r\n        };\r\n\r\n        fetchProjects();\r\n        fetchUsers();\r\n    }, []);\r\n\r\n    return (\r\n        <ErrorBoundary>\r\n            <Grid container rowSpacing={4.5} columnSpacing={3}>\r\n                {/* row 1 */}\r\n                <Grid item xs={12}>\r\n                    <WelcomeBanner />\r\n                </Grid>\r\n                <Grid item xs={12} sm={6} md={4} lg={3}>\r\n                    <AnalyticsDataCard title=\"XAML Build History\" count={new Date().toLocaleDateString()}>\r\n                        <UsersCardChart />\r\n                    </AnalyticsDataCard>\r\n                </Grid>\r\n                <Grid item xs={12} sm={6} md={4} lg={3}>\r\n                    <AnalyticsDataCard title=\"Total Projects\" count={projectCount.toString()}>\r\n                        {/* <OrdersCardChart />  */}\r\n                    </AnalyticsDataCard>\r\n                    <AnalyticsDataCard title=\"Total Users\" count={userCount.toString()}>\r\n                        {/*<SalesCardChart /> */}\r\n                    </AnalyticsDataCard>\r\n                </Grid>\r\n                <Grid item xs={12} sm={6} md={4} lg={3}>\r\n                    <AnalyticsDataCard title=\"Self Hosted Agents\">\r\n                        <SelfHostedAgentsPieChart />\r\n                    </AnalyticsDataCard>\r\n                </Grid>\r\n                <Grid item xs={12} sm={6} md={4} lg={3}>\r\n                    <AnalyticsDataCard title=\"Deployment Pools\">\r\n                        <DeploymentPoolsPieChart />\r\n                    </AnalyticsDataCard>\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                    <ErrorBoundary>\r\n                        <LastBuildsChart />\r\n                    </ErrorBoundary>\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                    <AzureDevOpsBuilds />\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                    <AzureDevOpsWorkItems />\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                    <AzureDevOpsWorkItemsDone />\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                    <ErrorBoundary>\r\n                        <AzureDevOpsWorkItemsPieChart />\r\n                    </ErrorBoundary>\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                    <TrendAnalysis \r\n                        commits={commits}\r\n                        pullRequests={pullRequests}\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                    <PerformanceMetrics\r\n                        commits={commits}\r\n                        pullRequests={pullRequests}\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                    <RepositoryComparison \r\n                        repositories={repositories}\r\n                        commits={commits}\r\n                        pullRequests={pullRequests}\r\n                    />\r\n                </Grid>\r\n\r\n                {/* <Grid item md={8} sx={{ display: { sm: 'none', md: 'block', lg: 'none' } }} /> */}\r\n\r\n            </Grid>\r\n        </ErrorBoundary>\r\n    )\r\n};\r\n\r\nexport default Dashboard;\r\n"],"names":["_ref","_ref$color","color","title","count","percentage","isLoss","children","_jsxs","MainCard","content","_jsx","Box","sx","p","Stack","spacing","Typography","variant","direction","alignItems","Chip","icon","_Fragment","RiseOutlined","style","fontSize","FallOutlined","label","concat","ml","pl","size","theme","useTheme","border","background","ThemeDirection","RTL","palette","primary","lighter","light","main","dark","darker","Grid","container","item","md","sm","xs","padding","paper","FormattedMessage","id","Button","disableElevation","cursor","borderColor","bgcolor","mode","ThemeMode","DARK","process","display","position","pr","justifyContent","src","WelcomeImage","alt","bottom","right","useConfig","_theme$palette$text","text","secondary","line","divider","_useState","useState","chart","sparkline","enabled","height","type","toolbar","show","offsetX","dataLabels","plotOptions","bar","columnWidth","tooltip","x","y","formatter","val","_useState2","_slicedToArray","options","setOptions","useEffect","prevState","_objectSpread","colors","_useState3","name","data","series","ReactApexChart","token","btoa","organization","builds","setBuilds","fetchProjectsAndBuilds","_asyncToGenerator","_regeneratorRuntime","mark","_callee","projectsResponse","projects","buildPromises","buildResponses","allBuilds","sortedBuilds","wrap","_context","prev","next","axios","get","headers","sent","value","map","project","Promise","all","flatMap","response","sort","a","b","Date","startTime","slice","t0","console","error","stop","apply","arguments","buildDurations","build","moment","duration","finishTime","diff","parseFloat","toFixed","chartOptions","xaxis","categories","yaxis","align","chartSeries","ApexCharts","_useAzureDevOps","useAzureDevOps","loading","message","status","result","toLocaleString","_ref$message","_ref$fullScreen","fullScreen","flexDirection","gap","minHeight","width","CircularProgress","top","left","backgroundColor","zIndex","_error$response","onRetry","isApiError","Alert","severity","action","onClick","getErrorMessage","loadingMessage","errorMessage","noDataMessage","_ref$sx","LoadingScreen","ErrorDisplay","Array","isArray","length","NoData","_useWorkItems","useWorkItems","workItems","refresh","stateCounts","reduce","acc","state","fields","labels","Object","keys","filter","legend","undefined","toString","values","DataContainer","entries","_ref2","key","setWorkItems","_useState4","completionPercentage","setCompletionPercentage","_useState5","_useState6","stateCategoryMap","setStateCategoryMap","_useState7","_useState8","setLoading","_useState9","_useState10","setError","fetchData","projectProcessMap","tempStateCategoryMap","projectName","allWorkItems","workItemIdsSet","_iterator","_step","idsArray","chunk","details","fetchAllProjects","fetchProcesses","t1","done","fetchStateCategory","Set","_createForOfIteratorHelper","s","n","fetchWorkItemsForProject","forEach","has","add","t2","e","f","finish","from","splice","fetchWorkItemDetails","_toConsumableArray","t3","sprintCounts","completionData","teamProject","iterationLevel1","iterationLevel2","_stateCategoryMap$tea","parentGroup","sprintName","Done","InProgress","total","completed","_sprintCounts$parentG","_ref3","sprints","_ref4","_ref5","running","stopped","setData","fetchPoolsAndAgents","_callee2","poolsResponse","poolsData","poolPromises","_context2","fetch","json","pool","agentsResponse","isHosted","poolType","agent","_x","LoadingOutlined","spin","ApexChart","repositories","commits","pullRequests","stats","useMemo","repo","repoCommits","c","repository","repoPRs","last30Days","subDays","recent","author","date","totalCommits","recentCommits","openPRs","authors","chartData","datasets","Card","CardContent","gutterBottom","Bar","barChartOptions","Table","TableHead","TableRow","TableCell","TableBody","trends","_weeklyStats","_weeklyStats$","_weeklyStats2","_weeklyStats$2","_weeklyStats3","_weeklyStats$3","startDate","subMonths","endDate","weeklyStats","eachWeekOfInterval","start","end","week","weekStart","startOfWeek","weekEnd","endOfWeek","weekCommits","commit","commitDate","weekPRs","prDate","creationDate","format","locale","tr","prs","growth","stat","tension","Line","lineChartOptions","Tooltip","mt","LinearProgress","Math","min","abs","metrics","prResolutionTime","pullRequestId","differenceInDays","closedDate","commitFrequency","avgPRResolutionTime","months","currentMonth","lastMonth","setMonth","getMonth","projectCount","setProjectCount","userCount","setUserCount","useRepositories","useCommits","usePullRequests","fetchProjects","GetAllProjects","fetchUsers","usersResponse","GetAllUserEntitlements","totalCount","ErrorBoundary","rowSpacing","columnSpacing","WelcomeBanner","lg","AnalyticsDataCard","toLocaleDateString","UsersCardChart","SelfHostedAgentsPieChart","DeploymentPoolsPieChart","LastBuildsChart","AzureDevOpsBuilds","AzureDevOpsWorkItems","AzureDevOpsWorkItemsDone","AzureDevOpsWorkItemsPieChart","TrendAnalysis","PerformanceMetrics","RepositoryComparison"],"sourceRoot":""}