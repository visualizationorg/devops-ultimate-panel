{"version":3,"file":"static/js/714.85b3a373.chunk.js","mappings":"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","sources":["components/cards/statistics/AnalyticsDataCard.js","sections/dashboard/WelcomeBanner.js","sections/dashboard/UsersCardChart.js","sections/dashboard/LastBuildsChart.js","sections/dashboard/last20builds.js","sections/admin/workitems-list/Workitems.js","sections/admin/workitems-list/WorkitemsDone.js","sections/dashboard/SelfHostedAgentsPieChart.js","sections/dashboard/DeploymentPoolsPieChart.js","sections/admin/repositories/RepositoryComparison.js","sections/admin/analytics/TrendAnalysis.js","sections/admin/analytics/PerformanceMetrics.js","sections/admin/analytics/TeamCollaboration.js","pages/dashboard/index.js"],"sourcesContent":["import PropTypes from 'prop-types';\r\n\r\n// material-ui\r\nimport { Box, Chip, Stack, Typography } from '@mui/material';\r\n\r\n// project import\r\nimport MainCard from 'components/MainCard';\r\n\r\n// assets\r\nimport { RiseOutlined, FallOutlined } from '@ant-design/icons';\r\n\r\n// ==============================|| STATISTICS - ECOMMERCE CARD ||============================== //\r\n\r\nconst AnalyticsDataCard = ({ color = 'primary', title, count, percentage, isLoss, children }) => (\r\n  <MainCard content={false}>\r\n    <Box sx={{ p: 2.25 }}>\r\n      <Stack spacing={0.5}>\r\n        <Typography variant=\"h6\" color=\"textSecondary\">\r\n          {title}\r\n        </Typography>\r\n        <Stack direction=\"row\" alignItems=\"center\">\r\n          <Typography variant=\"h4\" color=\"inherit\">\r\n            {count}\r\n          </Typography>\r\n          {percentage && (\r\n            <Chip\r\n              variant=\"combined\"\r\n              color={color}\r\n              icon={\r\n                <>\r\n                  {!isLoss && <RiseOutlined style={{ fontSize: '0.75rem', color: 'inherit' }} />}\r\n                  {isLoss && <FallOutlined style={{ fontSize: '0.75rem', color: 'inherit' }} />}\r\n                </>\r\n              }\r\n              label={`${percentage}%`}\r\n              sx={{ ml: 1.25, pl: 1 }}\r\n              size=\"small\"\r\n            />\r\n          )}\r\n        </Stack>\r\n      </Stack>\r\n    </Box>\r\n    {children}\r\n  </MainCard>\r\n);\r\n\r\nAnalyticsDataCard.propTypes = {\r\n  title: PropTypes.string,\r\n  count: PropTypes.string,\r\n  percentage: PropTypes.number,\r\n  isLoss: PropTypes.bool,\r\n  color: PropTypes.string,\r\n  children: PropTypes.node\r\n};\r\n\r\nexport default AnalyticsDataCard;\r\n","// material-ui\r\nimport { Grid, Typography, Button, Stack, Box } from '@mui/material';\r\nimport { useTheme } from '@mui/material/styles';\r\n\r\n// project import\r\nimport MainCard from 'components/MainCard';\r\nimport { ThemeMode, ThemeDirection } from 'config';\r\n\r\n// assets\r\nimport WelcomeImage from 'assets/images/analytics/welcome-banner.png';\r\nimport WelcomeImageArrow from 'assets/images/analytics/welcome-arrow.png';\r\n\r\n// third-party\r\nimport { FormattedMessage } from 'react-intl';\r\nimport { getStorageValue, STORAGE_KEYS } from 'utils/storage';\r\n\r\n// ==============================|| ANALYTICS - WELCOME ||============================== //\r\n\r\nconst WelcomeBanner = () => {\r\n  const theme = useTheme();\r\n\r\n  return (\r\n    <MainCard\r\n      border={false}\r\n      sx={{\r\n        background:\r\n          theme.direction === ThemeDirection.RTL\r\n            ? `linear-gradient(60.38deg, ${theme.palette.primary.lighter} 114%, ${theme.palette.primary.light} 34.42%, ${theme.palette.primary.main} 60.95%, ${theme.palette.primary.dark} 84.83%, ${theme.palette.primary.darker} 104.37%)`\r\n            : `linear-gradient(250.38deg, ${theme.palette.primary.lighter} 2.39%, ${theme.palette.primary.light} 34.42%, ${theme.palette.primary.main} 60.95%, ${theme.palette.primary.dark} 84.83%, ${theme.palette.primary.darker} 104.37%)`\r\n      }}\r\n    >\r\n      <Grid container>\r\n        <Grid item md={6} sm={6} xs={12}>\r\n          <Stack spacing={2} sx={{ padding: 3.4 }}>\r\n            <Typography variant=\"h2\" color={theme.palette.background.paper}>\r\n              <FormattedMessage id=\"welcome\" />\r\n            </Typography>\r\n            <Typography variant=\"h6\" color={theme.palette.background.paper}>\r\n              Never accessed users affected cost, pipeline agent useage and effective useage of MS Hosted free agents.\r\n            </Typography>\r\n            <Box>\r\n              <Button\r\n                disableElevation\r\n                variant=\"outlined\"\r\n                color=\"secondary\"\r\n                sx={{\r\n                  cursor: 'default',\r\n                  color: theme.palette.background.paper,\r\n                  borderColor: theme.palette.background.paper,\r\n                  '&:hover': {\r\n                    color: 'background.paper',\r\n                    borderColor: theme.palette.background.paper,\r\n                    bgcolor: theme.palette.mode === ThemeMode.DARK ? 'primary.darker' : 'primary.main'\r\n                  }\r\n                }}\r\n              >\r\n                ORGANIZATION : {getStorageValue(STORAGE_KEYS.ORGANIZATION, '')}\r\n              </Button>\r\n            </Box>\r\n          </Stack>\r\n        </Grid>\r\n        <Grid item sm={6} xs={12} sx={{ display: { xs: 'none', sm: 'initial' } }}>\r\n          <Stack sx={{ position: 'relative', pr: { sm: 3, md: 8 } }} justifyContent=\"center\" alignItems=\"flex-end\">\r\n            <img src={WelcomeImage} alt=\"Welcome\" />\r\n            <Box sx={{ position: 'absolute', bottom: 0, right: '10%' }}>\r\n              <img src={WelcomeImageArrow} alt=\"Welcome Arrow\" />\r\n            </Box>\r\n          </Stack>\r\n        </Grid>\r\n      </Grid>\r\n    </MainCard>\r\n  );\r\n};\r\n\r\nexport default WelcomeBanner;\r\n","import { useState, useEffect } from 'react';\r\n\r\n// material-ui\r\nimport { useTheme } from '@mui/material/styles';\r\n\r\n// project import\r\nimport { ThemeMode } from 'config';\r\nimport useConfig from 'hooks/useConfig';\r\n\r\n// third-party\r\nimport ReactApexChart from 'react-apexcharts';\r\n\r\n// ==============================|| USER CARD CHART ||============================== //\r\n\r\nconst UsersCardChart = () => {\r\n  const theme = useTheme();\r\n  const { mode } = useConfig();\r\n\r\n  // chart options\r\n  const areaChartOptions = {\r\n    chart: {\r\n      id: 'new-stack-chart',\r\n      sparkline: {\r\n        enabled: true\r\n      },\r\n      height: 100,\r\n      type: 'bar',\r\n      toolbar: {\r\n        show: false\r\n      },\r\n      offsetX: -4\r\n    },\r\n    dataLabels: {\r\n      enabled: false\r\n    },\r\n    plotOptions: {\r\n      bar: {\r\n        columnWidth: '80%'\r\n      }\r\n    },\r\n    tooltip: {\r\n      x: {\r\n        show: false\r\n      },\r\n      y: {\r\n        formatter(val) {\r\n          return `- ${val}`;\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  const { primary, secondary } = theme.palette.text;\r\n  const line = theme.palette.divider;\r\n\r\n  const [options, setOptions] = useState(areaChartOptions);\r\n\r\n  useEffect(() => {\r\n    setOptions((prevState) => ({\r\n      ...prevState,\r\n      colors: [theme.palette.primary.main, theme.palette.primary[700]],\r\n      theme: {\r\n        mode: mode === ThemeMode.DARK ? 'dark' : 'light'\r\n      }\r\n    }));\r\n  }, [mode, primary, secondary, line, theme]);\r\n\r\n  const [series] = useState([\r\n    {\r\n      name: 'Users',\r\n      data: [\r\n        220, 230, 240, 220, 225, 215, 205, 195, 185, 150, 185, 195, 80, 205, 215, 225, 240, 225, 215, 205, 80, 215, 225, 240, 215, 210, 190\r\n      ]\r\n    }\r\n  ]);\r\n\r\n  return <ReactApexChart options={options} series={series} type=\"bar\" height={100} />;\r\n};\r\n\r\nexport default UsersCardChart;\r\n","import { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\n\r\n// material-ui\r\nimport { useTheme } from '@mui/material/styles';\r\n\r\n// project import\r\nimport { ThemeMode } from 'config';\r\nimport useConfig from 'hooks/useConfig';\r\nimport { getStorageValue, STORAGE_KEYS } from 'utils/storage';\r\n\r\n// third-party\r\nimport ApexCharts from 'react-apexcharts';\r\nimport moment from 'moment';\r\n\r\nconst pat = getStorageValue(STORAGE_KEYS.PAT, '');\r\nconst token = btoa(`:${pat}`);\r\nconst organization = getStorageValue(STORAGE_KEYS.ORGANIZATION, '');\r\n\r\n// ==============================|| LAST BUILDS CHART ||============================== //\r\n\r\nconst LastBuildsChart = () => {\r\n  const theme = useTheme();\r\n  const { mode } = useConfig();\r\n\r\n  const [builds, setBuilds] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const fetchProjectsAndBuilds = async () => {\r\n      try {\r\n        // Organizasyondaki projeleri çek\r\n        const projectsResponse = await axios.get(\r\n          `https://dev.azure.com/${organization}/_apis/projects?api-version=7.0`,\r\n          {\r\n            headers: {\r\n              'Authorization': `Basic ${token}`,\r\n              'Content-Type': 'application/json'\r\n            },\r\n          }\r\n        );\r\n\r\n        const projects = projectsResponse.data.value;\r\n\r\n        // Her proje için API çağrılarını paralel yap\r\n        const buildPromises = projects.map(project =>\r\n          axios.get(\r\n            `https://dev.azure.com/${organization}/${project.name}/_apis/build/builds?api-version=7.0&$top=20`,\r\n            {\r\n              headers: {\r\n                'Authorization': `Basic ${token}`,\r\n                'Content-Type': 'application/json'\r\n              },\r\n            }\r\n          )\r\n        );\r\n\r\n        const buildResponses = await Promise.all(buildPromises);\r\n\r\n        // Gelen sonuçları birleştir\r\n        let allBuilds = buildResponses.flatMap(response => response.data.value);\r\n\r\n        // Build'leri başlangıç zamanına göre sıralayıp ilk 20 tanesini seç\r\n        const sortedBuilds = allBuilds\r\n          .sort((a, b) => new Date(b.startTime) - new Date(a.startTime))\r\n          .slice(0, 20);\r\n\r\n        setBuilds(sortedBuilds);\r\n      } catch (error) {\r\n        console.error('Error fetching builds:', error);\r\n      }\r\n    };\r\n\r\n    fetchProjectsAndBuilds();\r\n  }, []);\r\n\r\n  // Build sürelerini hesapla (sayı olarak)\r\n  const buildDurations = builds.map((build) => {\r\n    const startTime = moment(build.startTime);\r\n    const finishTime = moment(build.finishTime);\r\n    const duration = finishTime.diff(startTime, 'seconds');\r\n    // const duration = (finishTime - startTime) / 1000 / 60; // Süreyi dakikaya çeviriyoruz\r\n    return {\r\n      name: build.project.name, // Proje adını kullanıyoruz\r\n      duration: parseFloat(duration.toFixed(2)), // Süreyi sayısal olarak döndürüyoruz\r\n    };\r\n  });\r\n\r\n  // ApexCharts options ve series ayarları\r\n  const chartOptions = {\r\n    chart: {\r\n      type: 'bar',\r\n    },\r\n    xaxis: {\r\n      categories: buildDurations.map(build => build.name), // Proje adlarını göster\r\n      title: {\r\n        text: 'Project Name'\r\n      }\r\n    },\r\n    yaxis: {\r\n      title: {\r\n        text: 'Duration (seconds)'\r\n      }\r\n    },\r\n    title: {\r\n      text: 'Last 20 Builds',\r\n      align: 'center',\r\n      style: {\r\n        fontSize: '20px'\r\n      }\r\n    }\r\n  };\r\n\r\n  const chartSeries = [{\r\n    name: 'Duration',\r\n    data: buildDurations.map(build => build.duration) // Sayısal veri olarak süre\r\n  }];\r\n\r\n  return (\r\n  <ApexCharts\r\n    options={chartOptions}\r\n    series={chartSeries}\r\n    type=\"bar\"\r\n    height={350}\r\n  />)\r\n};\r\n\r\nexport default LastBuildsChart;\r\n","import React from 'react';\r\nimport { useAzureDevOps } from 'hooks/useAzureDevOps';\r\n\r\nconst AzureDevOpsBuilds = () => {\r\n    const { builds, loading, error } = useAzureDevOps();\r\n\r\n    if (loading) return <div>Yükleniyor...</div>;\r\n    if (error) return <div>Hata: {error.message}</div>;\r\n\r\n    return (\r\n        <div>\r\n            <h1>Organizasyon İçindeki Tüm Projelerden Son 20 Build</h1>\r\n            <ul>\r\n                {builds.map((build) => (\r\n                    <li key={build.id}>\r\n                        Proje: {build.project.name} - Build ID: {build.id} - Status: {build.status} -\r\n                        Result: {build.result} - Başlangıç Zamanı: {new Date(build.startTime).toLocaleString()}\r\n                    </li>\r\n                ))}\r\n            </ul>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default AzureDevOpsBuilds;\r\n","import { useAzureDevOps } from 'hooks/useAzureDevOps';\r\n\r\nconst AzureDevOpsWorkItems = () => {\r\n    const { workItems, loading, error } = useAzureDevOps();\r\n\r\n    if (loading) return <div>Yükleniyor...</div>;\r\n    if (error) return <div>Hata: {error.message}</div>;\r\n    \r\n    // System.State durumuna göre gruplama\r\n    const stateCounts = workItems.reduce((acc, item) => {\r\n        const state = item.fields['System.State'];\r\n        // undefined olanları saymamaya dikkat et\r\n        if (state) {\r\n            acc[state] = (acc[state] || 0) + 1;\r\n        }\r\n        return acc;\r\n    }, {});\r\n\r\n    return (\r\n        <div>\r\n            <h1>Work Items</h1>\r\n            <ul>\r\n                {Object.entries(stateCounts).map(([key, value]) => (\r\n                    <li key={key}>\r\n                        {key}: {value}\r\n                    </li>\r\n                ))}\r\n            </ul>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default AzureDevOpsWorkItems;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { fetchAllProjects, fetchProcesses, fetchStateCategory, fetchWorkItemsForProject, fetchWorkItemDetails } from 'services/AzureDevOpsService';\r\n\r\nconst WorkitemsDone = () => {\r\n    const [workItems, setWorkItems] = useState([]);\r\n    const [completionPercentage, setCompletionPercentage] = useState({});\r\n    const [stateCategoryMap, setStateCategoryMap] = useState({});\r\n    const [loading, setLoading] = useState(true);\r\n    const [error, setError] = useState(null);\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            try {\r\n                setLoading(true);\r\n                \r\n                // Projeleri ve process tiplerini çek\r\n                const projects = await fetchAllProjects();\r\n                const projectProcessMap = await fetchProcesses();\r\n\r\n                // State kategorilerini çek\r\n                const tempStateCategoryMap = {};\r\n                for (const projectName in projectProcessMap) {\r\n                    tempStateCategoryMap[projectName] = await fetchStateCategory(projectProcessMap[projectName]);\r\n                }\r\n                setStateCategoryMap(tempStateCategoryMap);\r\n\r\n                // Work itemları çek\r\n                let allWorkItems = [];\r\n                let workItemIdsSet = new Set();\r\n\r\n                for (const project of projects) {\r\n                    const workItemIds = await fetchWorkItemsForProject(project.name);\r\n                    workItemIds.forEach(item => {\r\n                        if (item?.id && !workItemIdsSet.has(item.id)) {\r\n                            workItemIdsSet.add(item.id);\r\n                        }\r\n                    });\r\n                }\r\n\r\n                // Work item detaylarını çek\r\n                const idsArray = Array.from(workItemIdsSet);\r\n                while (idsArray.length > 0) {\r\n                    const chunk = idsArray.splice(0, 200);\r\n                    const details = await fetchWorkItemDetails(chunk, 'System.TeamProject,System.IterationPath,System.IterationLevel1,System.IterationLevel2,System.State,System.AssignedTo');\r\n                    allWorkItems = [...allWorkItems, ...details];\r\n                }\r\n\r\n                setWorkItems(allWorkItems);\r\n            } catch (err) {\r\n                setError(err);\r\n            } finally {\r\n                setLoading(false);\r\n            }\r\n        };\r\n\r\n        fetchData();\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        const stateCounts = {};\r\n        let sprintCounts = {};\r\n        let completionData = {};\r\n\r\n        // Work Item'ları dolaşarak State sayımlarını yap\r\n        workItems.forEach((item) => {\r\n            const state = item.fields['System.State'];\r\n            const teamProject = item.fields['System.TeamProject'];\r\n            const iterationLevel1 = item.fields['System.IterationLevel1'];\r\n            const iterationLevel2 = item.fields['System.IterationLevel2'];\r\n\r\n            // Eğer iterationLevel2 yoksa işleme alma\r\n            if (!iterationLevel2) return;\r\n\r\n            // Parent grup anahtarını oluştur (TeamProject + IterationLevel1)\r\n            const parentGroup = `${teamProject} - ${iterationLevel1}`;\r\n            const sprintName = iterationLevel2;\r\n\r\n            // console.log(`Parent Group: ${parentGroup}, Sprint: ${sprintName}, State: ${state}`);\r\n\r\n            // State sayımlarını yap\r\n            if (state) {\r\n                if (!stateCounts[parentGroup]) {\r\n                    stateCounts[parentGroup] = {};\r\n                }\r\n                if (!stateCounts[parentGroup][sprintName]) {\r\n                    stateCounts[parentGroup][sprintName] = { Done: 0, InProgress: 0 };\r\n                }\r\n                if (!sprintCounts[parentGroup]) {\r\n                    sprintCounts[parentGroup] = {};\r\n                }\r\n                if (!sprintCounts[parentGroup][sprintName]) {\r\n                    sprintCounts[parentGroup][sprintName] = { total: 0, completed: 0 };\r\n                }\r\n\r\n                sprintCounts[parentGroup][sprintName].total++;\r\n\r\n                // State kategorisi Completed olanlara göre sayım yap\r\n                if (stateCategoryMap[teamProject]?.[state] === 'Completed') {\r\n                    sprintCounts[parentGroup][sprintName].completed++;\r\n                }\r\n            }\r\n        });\r\n\r\n        // Yüzdeyi hesapla\r\n        Object.keys(sprintCounts).forEach((parentGroup) => {\r\n            Object.keys(sprintCounts[parentGroup]).forEach((sprintName) => {\r\n                const { total, completed } = sprintCounts[parentGroup][sprintName];\r\n                const percentage = total > 0 ? (completed / total) * 100 : 0;\r\n                if (!completionData[parentGroup]) {\r\n                    completionData[parentGroup] = {};\r\n                }\r\n                completionData[parentGroup][sprintName] = percentage.toFixed(2);\r\n            });\r\n        });\r\n\r\n        setCompletionPercentage(completionData);\r\n    }, [workItems]);\r\n\r\n    return (\r\n        <div>\r\n            <h1>Work Items Done Rate</h1>\r\n            <strong>Team Project - Iteration Level 1</strong>\r\n            <ul>\r\n                {Object.entries(completionPercentage).map(([parentGroup, sprints]) => (\r\n                    <li key={parentGroup}>\r\n                        <strong>{parentGroup}</strong>\r\n                        <ul>\r\n                            {Object.entries(sprints).map(([sprintName, percentage]) => (\r\n                                <li key={sprintName}>\r\n                                    {sprintName} için tamamlanan: %{percentage}\r\n                                </li>\r\n                            ))}\r\n                        </ul>\r\n                    </li>\r\n                ))}\r\n            </ul>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default WorkitemsDone;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport ApexChart from \"react-apexcharts\"; // Assuming you are using ApexCharts\r\nimport { LoadingOutlined } from '@ant-design/icons'; // for a loading indicator\r\nimport { getStorageValue, STORAGE_KEYS } from 'utils/storage';\r\nconst SelfHostedAgentsPieChart = () => {\r\n  const [data, setData] = useState({ running: 0, stopped: 0 });\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  const fetchPoolsAndAgents = async () => {\r\n    const pat = getStorageValue(STORAGE_KEYS.PAT, '');\r\n    const token = btoa(`:${pat}`);\r\n    const organization = getStorageValue(STORAGE_KEYS.ORGANIZATION, '');\r\n\r\n    const headers = {\r\n      \"Authorization\": `Basic ${token}`,\r\n      \"Content-Type\": \"application/json\"\r\n    };\r\n\r\n    try {\r\n      // Fetch all pools\r\n      const poolsResponse = await fetch(`https://dev.azure.com/${organization}/_apis/distributedtask/pools?api-version=7.2-preview.1`, { headers });\r\n      const poolsData = await poolsResponse.json();\r\n\r\n      let running = 0;\r\n      let stopped = 0;\r\n\r\n      // For each pool, fetch the agents and filter based on the conditions\r\n      const poolPromises = poolsData.value.map(async (pool) => {\r\n        if (pool.isHosted === false && pool.poolType === \"automation\") {\r\n          const agentsResponse = await fetch(`https://dev.azure.com/${organization}/_apis/distributedtask/pools/${pool.id}/agents?api-version=7.0`, { headers });\r\n          const agentsData = await agentsResponse.json();\r\n\r\n          agentsData.value.forEach(agent => {\r\n            if (agent.enabled === true && agent.status === \"online\") {\r\n              running++;\r\n            } else {\r\n              stopped++;\r\n            }\r\n          });\r\n        }\r\n      });\r\n\r\n      await Promise.all(poolPromises);\r\n      setData({ running, stopped });\r\n      setLoading(false);\r\n\r\n    } catch (error) {\r\n      console.error(\"Error fetching data: \", error);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchPoolsAndAgents();\r\n  }, []);\r\n\r\n  // Chart configuration\r\n  const chartOptions = {\r\n    chart: {\r\n      type: 'pie',\r\n    },\r\n    labels: ['Available', 'Unavailable'],\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {loading ? <LoadingOutlined style={{ fontSize: 24 }} spin /> : (\r\n        <ApexChart\r\n          options={chartOptions}\r\n          series={[data.running, data.stopped]}\r\n          type=\"pie\"\r\n          width=\"500\"\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SelfHostedAgentsPieChart;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport ApexChart from \"react-apexcharts\"; // Assuming you are using ApexCharts\r\nimport { LoadingOutlined } from '@ant-design/icons'; // for a loading indicator\r\nimport { getStorageValue, STORAGE_KEYS } from 'utils/storage';\r\n\r\nconst DeploymentPoolsPieChart = () => {\r\n  const [data, setData] = useState({ running: 0, stopped: 0 });\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  const fetchPoolsAndAgents = async () => {\r\n    const pat = getStorageValue(STORAGE_KEYS.PAT, '');\r\n    const token = btoa(`:${pat}`);\r\n    const organization = getStorageValue(STORAGE_KEYS.ORGANIZATION, '');\r\n\r\n    const headers = {\r\n      \"Authorization\": `Basic ${token}`,\r\n      \"Content-Type\": \"application/json\"\r\n    };\r\n\r\n    try {\r\n      // Fetch all pools\r\n      const poolsResponse = await fetch(`https://dev.azure.com/${organization}/_apis/distributedtask/pools?api-version=7.2-preview.1`, { headers });\r\n      const poolsData = await poolsResponse.json();\r\n\r\n      let running = 0;\r\n      let stopped = 0;\r\n\r\n      // For each pool, fetch the agents and filter based on the conditions\r\n      const poolPromises = poolsData.value.map(async (pool) => {\r\n        if (pool.isHosted === false && pool.poolType === \"deployment\") {\r\n          const agentsResponse = await fetch(`https://dev.azure.com/${organization}/_apis/distributedtask/pools/${pool.id}/agents?api-version=7.0`, { headers });\r\n          const agentsData = await agentsResponse.json();\r\n\r\n          agentsData.value.forEach(agent => {\r\n            if (agent.enabled === true && agent.status === \"online\") {\r\n              running++;\r\n            } else {\r\n              stopped++;\r\n            }\r\n          });\r\n        }\r\n      });\r\n\r\n      await Promise.all(poolPromises);\r\n      setData({ running, stopped });\r\n      setLoading(false);\r\n\r\n    } catch (error) {\r\n      console.error(\"Error fetching data: \", error);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchPoolsAndAgents();\r\n  }, []);\r\n\r\n  // Chart configuration\r\n  const chartOptions = {\r\n    chart: {\r\n      type: 'pie',\r\n    },\r\n    labels: ['Available', 'Unavailable'],\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {loading ? <LoadingOutlined style={{ fontSize: 24 }} spin /> : (\r\n        <ApexChart\r\n          options={chartOptions}\r\n          series={[data.running, data.stopped]}\r\n          type=\"pie\"\r\n          width=\"500\"\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DeploymentPoolsPieChart;\r\n","import React, { useMemo } from 'react';\r\nimport { \r\n    Card, \r\n    CardContent, \r\n    Typography, \r\n    Grid, \r\n    Box,\r\n    Table,\r\n    TableBody,\r\n    TableCell,\r\n    TableHead,\r\n    TableRow,\r\n    Chip\r\n} from '@mui/material';\r\nimport { Bar } from 'react-chartjs-2';\r\nimport { format, subDays } from 'date-fns';\r\nimport { tr } from 'date-fns/locale';\r\nimport { barChartOptions } from 'utils/chartConfig';\r\n\r\nconst RepositoryComparison = ({ repositories, commits, pullRequests }) => {\r\n    const stats = useMemo(() => {\r\n        if (!repositories?.length || !commits?.length) return null;\r\n\r\n        const repoStats = repositories.map(repo => {\r\n            const repoCommits = commits.filter(c => c.repository.id === repo.id);\r\n            const repoPRs = pullRequests?.filter(pr => pr.repository.id === repo.id) || [];\r\n            const last30Days = subDays(new Date(), 30);\r\n\r\n            const recent = repoCommits.filter(c => \r\n                new Date(c.author.date) > last30Days\r\n            ).length;\r\n\r\n            return {\r\n                id: repo.id,\r\n                name: repo.name,\r\n                totalCommits: repoCommits.length,\r\n                recentCommits: recent,\r\n                openPRs: repoPRs.filter(pr => pr.status === 'active').length,\r\n                authors: new Set(repoCommits.map(c => c.author.name)).size\r\n            };\r\n        });\r\n\r\n        return repoStats.sort((a, b) => b.totalCommits - a.totalCommits);\r\n    }, [repositories, commits, pullRequests]);\r\n\r\n    if (!stats) return null;\r\n\r\n    const chartData = {\r\n        labels: stats.map(repo => repo.name),\r\n        datasets: [\r\n            {\r\n                label: 'Toplam Commit',\r\n                data: stats.map(repo => repo.totalCommits),\r\n                backgroundColor: '#2196F3'\r\n            },\r\n            {\r\n                label: 'Son 30 Gün',\r\n                data: stats.map(repo => repo.recentCommits),\r\n                backgroundColor: '#4CAF50'\r\n            }\r\n        ]\r\n    };\r\n\r\n    return (\r\n        <Grid container spacing={3}>\r\n            <Grid item xs={12}>\r\n                <Card>\r\n                    <CardContent>\r\n                        <Typography variant=\"h6\" gutterBottom>\r\n                            Repository Karşılaştırması\r\n                        </Typography>\r\n                        <Box sx={{ height: 400 }}>\r\n                            <Bar data={chartData} options={barChartOptions} />\r\n                        </Box>\r\n                    </CardContent>\r\n                </Card>\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n                <Card>\r\n                    <CardContent>\r\n                        <Typography variant=\"h6\" gutterBottom>\r\n                            Detaylı Karşılaştırma\r\n                        </Typography>\r\n                        <Table>\r\n                            <TableHead>\r\n                                <TableRow>\r\n                                    <TableCell>Repository</TableCell>\r\n                                    <TableCell align=\"right\">Toplam Commit</TableCell>\r\n                                    <TableCell align=\"right\">Son 30 Gün</TableCell>\r\n                                    <TableCell align=\"right\">Açık PR</TableCell>\r\n                                    <TableCell align=\"right\">Katkıda Bulunanlar</TableCell>\r\n                                    <TableCell align=\"right\">Aktivite</TableCell>\r\n                                </TableRow>\r\n                            </TableHead>\r\n                            <TableBody>\r\n                                {stats.map(repo => (\r\n                                    <TableRow key={repo.id}>\r\n                                        <TableCell>{repo.name}</TableCell>\r\n                                        <TableCell align=\"right\">{repo.totalCommits}</TableCell>\r\n                                        <TableCell align=\"right\">{repo.recentCommits}</TableCell>\r\n                                        <TableCell align=\"right\">{repo.openPRs}</TableCell>\r\n                                        <TableCell align=\"right\">{repo.authors}</TableCell>\r\n                                        <TableCell align=\"right\">\r\n                                            <Chip\r\n                                                size=\"small\"\r\n                                                color={repo.recentCommits > 0 ? 'success' : 'default'}\r\n                                                label={repo.recentCommits > 0 ? 'Aktif' : 'Pasif'}\r\n                                            />\r\n                                        </TableCell>\r\n                                    </TableRow>\r\n                                ))}\r\n                            </TableBody>\r\n                        </Table>\r\n                    </CardContent>\r\n                </Card>\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n\r\nexport default RepositoryComparison; \r\n","import React, { useMemo } from 'react';\r\nimport { \r\n    Card, \r\n    CardContent, \r\n    Typography, \r\n    Grid, \r\n    Box,\r\n    LinearProgress,\r\n    Tooltip\r\n} from '@mui/material';\r\nimport { Line } from 'react-chartjs-2';\r\nimport { format, subMonths, eachWeekOfInterval, startOfWeek, endOfWeek } from 'date-fns';\r\nimport { tr } from 'date-fns/locale';\r\nimport { lineChartOptions } from 'utils/chartConfig';\r\n\r\nconst TrendAnalysis = ({ commits, pullRequests }) => {\r\n    const trends = useMemo(() => {\r\n        if (!commits?.length) return null;\r\n\r\n        const startDate = subMonths(new Date(), 3);\r\n        const endDate = new Date();\r\n        \r\n        // Haftalık aralıkları oluştur\r\n        const weeks = eachWeekOfInterval({ start: startDate, end: endDate });\r\n        \r\n        const weeklyStats = weeks.map(week => {\r\n            const weekStart = startOfWeek(week);\r\n            const weekEnd = endOfWeek(week);\r\n            \r\n            const weekCommits = commits.filter(commit => {\r\n                const commitDate = new Date(commit.author.date);\r\n                return commitDate >= weekStart && commitDate <= weekEnd;\r\n            });\r\n\r\n            const weekPRs = pullRequests?.filter(pr => {\r\n                const prDate = new Date(pr.creationDate);\r\n                return prDate >= weekStart && prDate <= weekEnd;\r\n            }) || [];\r\n\r\n            return {\r\n                week: format(week, 'dd MMM', { locale: tr }),\r\n                commits: weekCommits.length,\r\n                prs: weekPRs.length,\r\n                authors: new Set(weekCommits.map(c => c.author.name)).size\r\n            };\r\n        });\r\n\r\n        // Büyüme oranları\r\n        const growth = {\r\n            commits: ((weeklyStats[weeklyStats.length - 1]?.commits || 0) / \r\n                     (weeklyStats[0]?.commits || 1) - 1) * 100,\r\n            prs: ((weeklyStats[weeklyStats.length - 1]?.prs || 0) / \r\n                  (weeklyStats[0]?.prs || 1) - 1) * 100,\r\n            authors: ((weeklyStats[weeklyStats.length - 1]?.authors || 0) / \r\n                     (weeklyStats[0]?.authors || 1) - 1) * 100\r\n        };\r\n\r\n        return { weeklyStats, growth };\r\n    }, [commits, pullRequests]);\r\n\r\n    if (!trends) return null;\r\n\r\n    const chartData = {\r\n        labels: trends.weeklyStats.map(stat => stat.week),\r\n        datasets: [\r\n            {\r\n                label: 'Commitler',\r\n                data: trends.weeklyStats.map(stat => stat.commits),\r\n                borderColor: '#2196F3',\r\n                tension: 0.1\r\n            },\r\n            {\r\n                label: 'Pull Requestler',\r\n                data: trends.weeklyStats.map(stat => stat.prs),\r\n                borderColor: '#4CAF50',\r\n                tension: 0.1\r\n            },\r\n            {\r\n                label: 'Aktif Geliştiriciler',\r\n                data: trends.weeklyStats.map(stat => stat.authors),\r\n                borderColor: '#FFC107',\r\n                tension: 0.1\r\n            }\r\n        ]\r\n    };\r\n\r\n    return (\r\n        <Grid container spacing={3}>\r\n            <Grid item xs={12}>\r\n                <Card>\r\n                    <CardContent>\r\n                        <Typography variant=\"h6\" gutterBottom>\r\n                            3 Aylık Trend Analizi\r\n                        </Typography>\r\n                        <Box sx={{ height: 400 }}>\r\n                            <Line data={chartData} options={lineChartOptions} />\r\n                        </Box>\r\n                    </CardContent>\r\n                </Card>\r\n            </Grid>\r\n            <Grid item xs={12} md={4}>\r\n                <Card>\r\n                    <CardContent>\r\n                        <Typography variant=\"h6\" gutterBottom>\r\n                            Commit Büyüme Oranı\r\n                        </Typography>\r\n                        <Tooltip title=\"Son 3 aydaki büyüme\">\r\n                            <Box sx={{ mt: 2 }}>\r\n                                <Typography variant=\"h4\" color={trends.growth.commits > 0 ? 'success.main' : 'error.main'}>\r\n                                    {trends.growth.commits.toFixed(1)}%\r\n                                </Typography>\r\n                                <LinearProgress \r\n                                    variant=\"determinate\" \r\n                                    value={Math.min(Math.abs(trends.growth.commits), 100)}\r\n                                    color={trends.growth.commits > 0 ? 'success' : 'error'}\r\n                                    sx={{ mt: 1 }}\r\n                                />\r\n                            </Box>\r\n                        </Tooltip>\r\n                    </CardContent>\r\n                </Card>\r\n            </Grid>\r\n            <Grid item xs={12} md={4}>\r\n                <Card>\r\n                    <CardContent>\r\n                        <Typography variant=\"h6\" gutterBottom>\r\n                            PR Büyüme Oranı\r\n                        </Typography>\r\n                        <Tooltip title=\"Son 3 aydaki büyüme\">\r\n                            <Box sx={{ mt: 2 }}>\r\n                                <Typography variant=\"h4\" color={trends.growth.prs > 0 ? 'success.main' : 'error.main'}>\r\n                                    {trends.growth.prs.toFixed(1)}%\r\n                                </Typography>\r\n                                <LinearProgress \r\n                                    variant=\"determinate\" \r\n                                    value={Math.min(Math.abs(trends.growth.prs), 100)}\r\n                                    color={trends.growth.prs > 0 ? 'success' : 'error'}\r\n                                    sx={{ mt: 1 }}\r\n                                />\r\n                            </Box>\r\n                        </Tooltip>\r\n                    </CardContent>\r\n                </Card>\r\n            </Grid>\r\n            <Grid item xs={12} md={4}>\r\n                <Card>\r\n                    <CardContent>\r\n                        <Typography variant=\"h6\" gutterBottom>\r\n                            Geliştirici Büyüme Oranı\r\n                        </Typography>\r\n                        <Tooltip title=\"Son 3 aydaki büyüme\">\r\n                            <Box sx={{ mt: 2 }}>\r\n                                <Typography variant=\"h4\" color={trends.growth.authors > 0 ? 'success.main' : 'error.main'}>\r\n                                    {trends.growth.authors.toFixed(1)}%\r\n                                </Typography>\r\n                                <LinearProgress \r\n                                    variant=\"determinate\" \r\n                                    value={Math.min(Math.abs(trends.growth.authors), 100)}\r\n                                    color={trends.growth.authors > 0 ? 'success' : 'error'}\r\n                                    sx={{ mt: 1 }}\r\n                                />\r\n                            </Box>\r\n                        </Tooltip>\r\n                    </CardContent>\r\n                </Card>\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n\r\nexport default TrendAnalysis; \r\n","import React, { useMemo } from 'react';\r\nimport { \r\n    Card, \r\n    CardContent, \r\n    Typography, \r\n    Grid, \r\n    Box,\r\n    Table,\r\n    TableBody,\r\n    TableCell,\r\n    TableHead,\r\n    TableRow\r\n} from '@mui/material';\r\nimport { format, differenceInDays } from 'date-fns';\r\nimport { tr } from 'date-fns/locale';\r\n\r\nconst PerformanceMetrics = ({ commits, pullRequests }) => {\r\n    const metrics = useMemo(() => {\r\n        if (!commits?.length) return null;\r\n\r\n        // PR çözüm süresi\r\n        const prResolutionTime = pullRequests\r\n            ?.filter(pr => pr.status === 'completed')\r\n            .map(pr => ({\r\n                id: pr.pullRequestId,\r\n                title: pr.title,\r\n                duration: differenceInDays(\r\n                    new Date(pr.closedDate),\r\n                    new Date(pr.creationDate)\r\n                )\r\n            })) || [];\r\n\r\n        // Commit sıklığı\r\n        const commitFrequency = commits.reduce((acc, commit) => {\r\n            const author = commit.author.name;\r\n            const date = format(new Date(commit.author.date), 'yyyy-MM');\r\n            \r\n            if (!acc[author]) acc[author] = {};\r\n            acc[author][date] = (acc[author][date] || 0) + 1;\r\n            \r\n            return acc;\r\n        }, {});\r\n\r\n        return {\r\n            prResolutionTime,\r\n            commitFrequency,\r\n            avgPRResolutionTime: prResolutionTime.reduce((acc, pr) => acc + pr.duration, 0) / \r\n                                (prResolutionTime.length || 1)\r\n        };\r\n    }, [commits, pullRequests]);\r\n\r\n    if (!metrics) return null;\r\n\r\n    return (\r\n        <Grid container spacing={3}>\r\n            <Grid item xs={12} md={6}>\r\n                <Card>\r\n                    <CardContent>\r\n                        <Typography variant=\"h6\" gutterBottom>\r\n                            PR Çözüm Süreleri\r\n                        </Typography>\r\n                        <Table size=\"small\">\r\n                            <TableHead>\r\n                                <TableRow>\r\n                                    <TableCell>PR #</TableCell>\r\n                                    <TableCell>Başlık</TableCell>\r\n                                    <TableCell align=\"right\">Süre (Gün)</TableCell>\r\n                                </TableRow>\r\n                            </TableHead>\r\n                            <TableBody>\r\n                                {metrics.prResolutionTime.map(pr => (\r\n                                    <TableRow key={pr.id}>\r\n                                        <TableCell>{pr.id}</TableCell>\r\n                                        <TableCell>{pr.title}</TableCell>\r\n                                        <TableCell align=\"right\">{pr.duration}</TableCell>\r\n                                    </TableRow>\r\n                                ))}\r\n                            </TableBody>\r\n                        </Table>\r\n                        <Box sx={{ mt: 2 }}>\r\n                            <Typography variant=\"subtitle2\" color=\"textSecondary\">\r\n                                Ortalama Çözüm Süresi: {metrics.avgPRResolutionTime.toFixed(1)} gün\r\n                            </Typography>\r\n                        </Box>\r\n                    </CardContent>\r\n                </Card>\r\n            </Grid>\r\n            <Grid item xs={12} md={6}>\r\n                <Card>\r\n                    <CardContent>\r\n                        <Typography variant=\"h6\" gutterBottom>\r\n                            Aylık Commit Sıklığı\r\n                        </Typography>\r\n                        <Table size=\"small\">\r\n                            <TableHead>\r\n                                <TableRow>\r\n                                    <TableCell>Geliştirici</TableCell>\r\n                                    <TableCell align=\"right\">Bu Ay</TableCell>\r\n                                    <TableCell align=\"right\">Geçen Ay</TableCell>\r\n                                </TableRow>\r\n                            </TableHead>\r\n                            <TableBody>\r\n                                {Object.entries(metrics.commitFrequency).map(([author, months]) => {\r\n                                    const currentMonth = format(new Date(), 'yyyy-MM');\r\n                                    const lastMonth = format(new Date(new Date().setMonth(new Date().getMonth() - 1)), 'yyyy-MM');\r\n                                    \r\n                                    return (\r\n                                        <TableRow key={author}>\r\n                                            <TableCell>{author}</TableCell>\r\n                                            <TableCell align=\"right\">{months[currentMonth] || 0}</TableCell>\r\n                                            <TableCell align=\"right\">{months[lastMonth] || 0}</TableCell>\r\n                                        </TableRow>\r\n                                    );\r\n                                })}\r\n                            </TableBody>\r\n                        </Table>\r\n                    </CardContent>\r\n                </Card>\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n\r\nexport default PerformanceMetrics; \r\n","import React, { useMemo } from 'react';\r\nimport { \r\n    Card, \r\n    CardContent, \r\n    Typography, \r\n    Grid, \r\n    Box,\r\n    Table,\r\n    TableBody,\r\n    TableCell,\r\n    TableHead,\r\n    TableRow,\r\n    Avatar,\r\n    Stack,\r\n    Chip\r\n} from '@mui/material';\r\nimport { format, subMonths } from 'date-fns';\r\nimport { tr } from 'date-fns/locale';\r\n\r\nconst TeamCollaboration = ({ commits, pullRequests }) => {\r\n    const stats = useMemo(() => {\r\n        if (!commits?.length) return null;\r\n\r\n        const developers = {};\r\n        const lastMonth = subMonths(new Date(), 1);\r\n\r\n        commits.forEach(commit => {\r\n            const author = commit.author.name;\r\n            const commitDate = new Date(commit.author.date);\r\n            \r\n            if (!developers[author]) {\r\n                developers[author] = {\r\n                    name: author,\r\n                    avatar: commit.author.imageUrl,\r\n                    totalCommits: 0,\r\n                    recentCommits: 0,\r\n                    pullRequests: 0,\r\n                    reviewedPRs: 0,\r\n                    repositories: new Set()\r\n                };\r\n            }\r\n\r\n            developers[author].totalCommits++;\r\n            developers[author].repositories.add(commit.repository.name);\r\n            \r\n            if (commitDate > lastMonth) {\r\n                developers[author].recentCommits++;\r\n            }\r\n        });\r\n\r\n        // PR istatistiklerini ekle\r\n        pullRequests?.forEach(pr => {\r\n            const author = pr.createdBy.displayName;\r\n            if (developers[author]) {\r\n                developers[author].pullRequests++;\r\n            }\r\n\r\n            // Review'ları say\r\n            pr.reviewers?.forEach(reviewer => {\r\n                if (developers[reviewer.displayName]) {\r\n                    developers[reviewer.displayName].reviewedPRs++;\r\n                }\r\n            });\r\n        });\r\n\r\n        return Object.values(developers)\r\n            .map(dev => ({\r\n                ...dev,\r\n                repositories: dev.repositories.size,\r\n                collaborationScore: (\r\n                    dev.recentCommits * 2 + \r\n                    dev.pullRequests * 3 + \r\n                    dev.reviewedPRs * 2\r\n                ) / 7\r\n            }))\r\n            .sort((a, b) => b.collaborationScore - a.collaborationScore);\r\n    }, [commits, pullRequests]);\r\n\r\n    if (!stats) return null;\r\n\r\n    return (\r\n        <Grid container spacing={3}>\r\n            <Grid item xs={12}>\r\n                <Card>\r\n                    <CardContent>\r\n                        <Typography variant=\"h6\" gutterBottom>\r\n                            Takım İş Birliği Metrikleri\r\n                        </Typography>\r\n                        <Table>\r\n                            <TableHead>\r\n                                <TableRow>\r\n                                    <TableCell>Geliştirici</TableCell>\r\n                                    <TableCell align=\"center\">Son Ay Commits</TableCell>\r\n                                    <TableCell align=\"center\">Pull Requests</TableCell>\r\n                                    <TableCell align=\"center\">Code Reviews</TableCell>\r\n                                    <TableCell align=\"center\">Repositories</TableCell>\r\n                                    <TableCell align=\"right\">İş Birliği Skoru</TableCell>\r\n                                </TableRow>\r\n                            </TableHead>\r\n                            <TableBody>\r\n                                {stats.map((dev) => (\r\n                                    <TableRow key={dev.name}>\r\n                                        <TableCell>\r\n                                            <Stack direction=\"row\" spacing={2} alignItems=\"center\">\r\n                                                <Avatar src={dev.avatar} />\r\n                                                <Typography>{dev.name}</Typography>\r\n                                            </Stack>\r\n                                        </TableCell>\r\n                                        <TableCell align=\"center\">{dev.recentCommits}</TableCell>\r\n                                        <TableCell align=\"center\">{dev.pullRequests}</TableCell>\r\n                                        <TableCell align=\"center\">{dev.reviewedPRs}</TableCell>\r\n                                        <TableCell align=\"center\">{dev.repositories}</TableCell>\r\n                                        <TableCell align=\"right\">\r\n                                            <Chip \r\n                                                label={dev.collaborationScore.toFixed(1)}\r\n                                                color={dev.collaborationScore > 5 ? 'success' : 'default'}\r\n                                            />\r\n                                        </TableCell>\r\n                                    </TableRow>\r\n                                ))}\r\n                            </TableBody>\r\n                        </Table>\r\n                    </CardContent>\r\n                </Card>\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n\r\nexport default TeamCollaboration; \r\n","import { useEffect, useState } from 'react';\r\n\r\n// material-ui\r\nimport { useTheme } from '@mui/material/styles';\r\nimport {\r\n    Grid\r\n} from '@mui/material';\r\n\r\n// project import\r\nimport AnalyticsDataCard from 'components/cards/statistics/AnalyticsDataCard';\r\nimport WelcomeBanner from 'sections/dashboard/WelcomeBanner';\r\nimport UsersCardChart from 'sections/dashboard/UsersCardChart';\r\nimport LastBuildsChart from 'sections/dashboard/LastBuildsChart';\r\n\r\nimport { GetAll as GetAllProjects } from 'api/ProjectsApi';\r\nimport { GetAll as GetAllUserEntitlements } from 'api/UserEntitlementsApi';\r\n\r\n// third-party\r\nimport { FormattedMessage } from 'react-intl';\r\nimport AzureDevOpsBuilds from 'sections/dashboard/last20builds';\r\nimport AzureDevOpsWorkItemsPieChart from 'sections/dashboard/WorkItemsPieChart';\r\nimport AzureDevOpsWorkItems from 'sections/admin/workitems-list/Workitems';\r\nimport AzureDevOpsWorkItemsDone from 'sections/admin/workitems-list/WorkitemsDone';\r\nimport SelfHostedAgentsPieChart from 'sections/dashboard/SelfHostedAgentsPieChart';\r\nimport DeploymentPoolsPieChart from 'sections/dashboard/DeploymentPoolsPieChart';\r\nimport ErrorBoundary from 'components/ErrorBoundary';\r\nimport RepositoryComparison from 'sections/admin/repositories/RepositoryComparison';\r\nimport { useCommits, useRepositories, usePullRequests } from 'hooks/useAzureDevOps';\r\nimport TrendAnalysis from 'sections/admin/analytics/TrendAnalysis';\r\nimport PerformanceMetrics from 'sections/admin/analytics/PerformanceMetrics';\r\nimport TeamCollaboration from 'sections/admin/analytics/TeamCollaboration';\r\nimport MainCard from 'components/MainCard';\r\n\r\n// ==============================|| DASHBOARD ||============================== //\r\n\r\nconst Dashboard = () => {\r\n\r\n    const [projectCount, setProjectCount] = useState([]);\r\n    const [userCount, setUserCount] = useState([]);\r\n    const { data: repositories } = useRepositories();\r\n    const { data: commits } = useCommits();\r\n    const { data: pullRequests } = usePullRequests();\r\n\r\n    useEffect(() => {\r\n        const fetchProjects = async () => {\r\n            try {\r\n                const projectsResponse = await GetAllProjects();\r\n                setProjectCount(projectsResponse.data.count);\r\n            } catch (error) {\r\n                console.error('Error fetching projects:', error);\r\n            }\r\n        };\r\n\r\n        const fetchUsers = async () => {\r\n            try {\r\n                const usersResponse = await GetAllUserEntitlements();\r\n                setUserCount(usersResponse.data.totalCount);\r\n            } catch (error) {\r\n                console.error('Error fetching users:', error);\r\n            }\r\n        };\r\n\r\n        fetchProjects();\r\n        fetchUsers();\r\n    }, []);\r\n\r\n    return (\r\n        <ErrorBoundary>\r\n            <Grid container rowSpacing={4.5} columnSpacing={3}>\r\n                {/* row 1 */}\r\n                <Grid item xs={12}>\r\n                    <WelcomeBanner />\r\n                </Grid>\r\n                <Grid item xs={12} sm={6} md={4} lg={3}>\r\n                    <AnalyticsDataCard title=\"XAML Build History\" count={new Date().toLocaleDateString()}>\r\n                        <UsersCardChart />\r\n                    </AnalyticsDataCard>\r\n                </Grid>\r\n                <Grid item xs={12} sm={6} md={4} lg={3}>\r\n                    <AnalyticsDataCard title=\"Total Projects\" count={projectCount.toString()}>\r\n                        {/* <OrdersCardChart />  */}\r\n                    </AnalyticsDataCard>\r\n                    <AnalyticsDataCard title=\"Total Users\" count={userCount.toString()}>\r\n                        {/*<SalesCardChart /> */}\r\n                    </AnalyticsDataCard>\r\n                </Grid>\r\n                <Grid item xs={12} sm={6} md={4} lg={3}>\r\n                    <AnalyticsDataCard title=\"Self Hosted Agents\">\r\n                        <SelfHostedAgentsPieChart />\r\n                    </AnalyticsDataCard>\r\n                </Grid>\r\n                <Grid item xs={12} sm={6} md={4} lg={3}>\r\n                    <AnalyticsDataCard title=\"Deployment Pools\">\r\n                        <DeploymentPoolsPieChart />\r\n                    </AnalyticsDataCard>\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                    <ErrorBoundary>\r\n                        <LastBuildsChart />\r\n                    </ErrorBoundary>\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                    <AzureDevOpsBuilds />\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                    <AzureDevOpsWorkItems />\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                    <AzureDevOpsWorkItemsDone />\r\n                </Grid>\r\n                {/* <Grid item xs={12}>\r\n                    <ErrorBoundary>\r\n                        <AzureDevOpsWorkItemsPieChart />\r\n                    </ErrorBoundary>\r\n                </Grid> */}\r\n                <Grid item xs={12}>\r\n                    Trend Analysis:\r\n                    <TrendAnalysis\r\n                        commits={commits}\r\n                        pullRequests={pullRequests}\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                    Performance Metrics:\r\n                    <PerformanceMetrics\r\n                        commits={commits}\r\n                        pullRequests={pullRequests}\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                    Repository Comparison:\r\n                    <RepositoryComparison\r\n                        repositories={repositories}\r\n                        commits={commits}\r\n                        pullRequests={pullRequests}\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                    <MainCard title=\"Team Collaboration\">\r\n                        <TeamCollaboration \r\n                            commits={commits} \r\n                            pullRequests={pullRequests} \r\n                        />\r\n                    </MainCard>\r\n                </Grid>\r\n\r\n                {/* <Grid item md={8} sx={{ display: { sm: 'none', md: 'block', lg: 'none' } }} /> */}\r\n\r\n            </Grid>\r\n        </ErrorBoundary>\r\n    )\r\n};\r\n\r\nexport default Dashboard;\r\n"],"names":["_ref","_ref$color","color","title","count","percentage","isLoss","children","_jsxs","MainCard","content","_jsx","Box","sx","p","Stack","spacing","Typography","variant","direction","alignItems","Chip","icon","_Fragment","RiseOutlined","style","fontSize","FallOutlined","label","concat","ml","pl","size","theme","useTheme","border","background","ThemeDirection","RTL","palette","primary","lighter","light","main","dark","darker","Grid","container","item","md","sm","xs","padding","paper","FormattedMessage","id","Button","disableElevation","cursor","borderColor","bgcolor","mode","ThemeMode","DARK","getStorageValue","STORAGE_KEYS","ORGANIZATION","display","position","pr","justifyContent","src","WelcomeImage","alt","bottom","right","useConfig","_theme$palette$text","text","secondary","line","divider","_useState","useState","chart","sparkline","enabled","height","type","toolbar","show","offsetX","dataLabels","plotOptions","bar","columnWidth","tooltip","x","y","formatter","val","_useState2","_slicedToArray","options","setOptions","useEffect","prevState","_objectSpread","colors","_useState3","name","data","series","ReactApexChart","pat","PAT","token","btoa","organization","builds","setBuilds","fetchProjectsAndBuilds","_asyncToGenerator","_regeneratorRuntime","mark","_callee","projectsResponse","projects","buildPromises","buildResponses","allBuilds","sortedBuilds","wrap","_context","prev","next","axios","get","headers","sent","value","map","project","Promise","all","flatMap","response","sort","a","b","Date","startTime","slice","t0","console","error","stop","apply","arguments","buildDurations","build","moment","duration","finishTime","diff","parseFloat","toFixed","chartOptions","xaxis","categories","yaxis","align","chartSeries","ApexCharts","_useAzureDevOps","useAzureDevOps","loading","message","status","result","toLocaleString","workItems","stateCounts","reduce","acc","state","fields","Object","entries","_ref2","key","setWorkItems","_useState4","completionPercentage","setCompletionPercentage","_useState5","_useState6","stateCategoryMap","setStateCategoryMap","_useState7","_useState8","setLoading","_useState9","_useState10","setError","fetchData","projectProcessMap","tempStateCategoryMap","projectName","allWorkItems","workItemIdsSet","_iterator","_step","idsArray","chunk","details","fetchAllProjects","fetchProcesses","keys","t1","done","fetchStateCategory","Set","_createForOfIteratorHelper","s","n","fetchWorkItemsForProject","forEach","has","add","t2","e","f","finish","Array","from","length","splice","fetchWorkItemDetails","_toConsumableArray","t3","sprintCounts","completionData","teamProject","iterationLevel1","iterationLevel2","_stateCategoryMap$tea","parentGroup","sprintName","Done","InProgress","total","completed","_sprintCounts$parentG","_ref3","sprints","_ref4","_ref5","running","stopped","setData","fetchPoolsAndAgents","_callee2","poolsResponse","poolsData","poolPromises","_context2","fetch","json","pool","agentsResponse","isHosted","poolType","agent","_x","LoadingOutlined","spin","ApexChart","labels","width","repositories","commits","pullRequests","stats","useMemo","repo","repoCommits","filter","c","repository","repoPRs","last30Days","subDays","recent","author","date","totalCommits","recentCommits","openPRs","authors","chartData","datasets","backgroundColor","Card","CardContent","gutterBottom","Bar","barChartOptions","Table","TableHead","TableRow","TableCell","TableBody","trends","_weeklyStats","_weeklyStats$","_weeklyStats2","_weeklyStats$2","_weeklyStats3","_weeklyStats$3","startDate","subMonths","endDate","weeklyStats","eachWeekOfInterval","start","end","week","weekStart","startOfWeek","weekEnd","endOfWeek","weekCommits","commit","commitDate","weekPRs","prDate","creationDate","format","locale","tr","prs","growth","stat","tension","Line","lineChartOptions","Tooltip","mt","LinearProgress","Math","min","abs","metrics","prResolutionTime","pullRequestId","differenceInDays","closedDate","commitFrequency","avgPRResolutionTime","months","currentMonth","lastMonth","setMonth","getMonth","developers","avatar","imageUrl","reviewedPRs","_pr$reviewers","createdBy","displayName","reviewers","reviewer","values","dev","collaborationScore","Avatar","projectCount","setProjectCount","userCount","setUserCount","useRepositories","useCommits","usePullRequests","fetchProjects","GetAllProjects","fetchUsers","usersResponse","GetAllUserEntitlements","totalCount","ErrorBoundary","rowSpacing","columnSpacing","WelcomeBanner","lg","AnalyticsDataCard","toLocaleDateString","UsersCardChart","toString","SelfHostedAgentsPieChart","DeploymentPoolsPieChart","LastBuildsChart","AzureDevOpsBuilds","AzureDevOpsWorkItems","AzureDevOpsWorkItemsDone","TrendAnalysis","PerformanceMetrics","RepositoryComparison","TeamCollaboration"],"sourceRoot":""}